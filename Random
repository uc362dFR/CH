package com.playsaurus.random
{
   import com.playsaurus.model.Model;
   
   public class Random extends Model
   {
      
      public static const RAND_MAX:Number = 2147483646;
       
      public var seed:Number;
      
      public var numUses:Number = 0;
      
      public function Random()
      {
         super();
         this.registerDynamicNumber("seed");
         this.registerDynamicNumber("numUses");
      }
      
      public function rand() : Number
      {
         if(!this.seed)
         {
            throw new Error("rand() called without a seed");
         }
         this.numUses++;
         this.seed = this.seed * 16807 % (RAND_MAX + 1);
         return this.seed;
      }
      
      public function boolean(param1:Number) : Boolean
      {
         return this.randFloat() < param1;
      }
      
      public function range(param1:Number, param2:Number) : Number
      {
         if(isNaN(param1) || isNaN(param2))
         {
            throw new Error("min or max is NaN");
         }
         return this.rand() % (param2 - param1 + 1) + param1;
      }
      
      public function integer(param1:Number, param2:Number = NaN) : int
      {
         if(isNaN(param2))
         {
            var param2:Number = param1;
            var param1:Number = 0;
         }
         return Math.floor(this.range(param1,param2));
      }
      
      public function randFloat() : Number
      {
         return this.rand() / RAND_MAX;
      }
      
      public function srand(param1:Number) : *
      {
         if(param1 != int(param1))
         {
            throw new Error("seed should be a whole number");
         }
         if(param1 <= 0 || param1 > RAND_MAX)
         {
            throw new Error("Seed out of range");
         }
         this.seed = param1;
      }
      
      public function weightedChoice(param1:Object) : *
      {
         var _loc4_:* = undefined;
         var _loc2_:* = 0;
         var _loc3_:Array = new Array();
         for(_loc4_ in param1)
         {
            if(!(param1[_loc4_] is int))
            {
               throw new Error("Random.weightedChoice received bad values");
            }
            _loc2_ = _loc2_ + param1[_loc4_];
            _loc3_.push(int(_loc4_));
         }
         _loc3_.sort(Array.NUMERIC);
         if(_loc2_ == 0)
         {
            throw new Error("Sum of weightedChoice options does not add up to anything meaningful");
         }
         var _loc5_:Number = this.rand() % _loc2_ + 1;
         _loc2_ = 0;
         for each(_loc4_ in _loc3_)
         {
            _loc2_ = _loc2_ + param1[_loc4_];
            if(_loc5_ <= _loc2_)
            {
               return _loc4_;
            }
         }
         throw new Error("Argument passed to Random.weightedChoice is invalid");
      }
   }
}
