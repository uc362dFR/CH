package models
{
   import com.playsaurus.model.DynamicCollectionContainer;
   import com.playsaurus.random.Random;
   import com.playsaurus.utils.ServerTimeKeeper;
   import com.gskinner.utils.Rnd;
   import com.playsaurus.utils.CurrentUser;
   
   public class Mercenaries extends DynamicCollectionContainer
   {
      
      public static const QUEST_DURATIONS_COUNT:Number = 9;
      
      public static const questDurations:Object = {
         1:{
            "description":"5 Minutes",
            "duration":300,
            "successChance":1152 / 1153,
            "durationBonus":3.2
         },
         2:{
            "description":"15 Minutes",
            "duration":900,
            "successChance":384 / 385,
            "durationBonus":2.75
         },
         3:{
            "description":"30 Minutes",
            "duration":1800,
            "successChance":192 / 193,
            "durationBonus":2.5
         },
         4:{
            "description":"1 Hour",
            "duration":3600,
            "successChance":96 / 97,
            "durationBonus":2
         },
         5:{
            "description":"2 Hours",
            "duration":7200,
            "successChance":48 / 49,
            "durationBonus":1.75
         },
         6:{
            "description":"4 Hours",
            "duration":14400,
            "successChance":24 / 25,
            "durationBonus":1.5
         },
         7:{
            "description":"8 Hours",
            "duration":28800,
            "successChance":12 / 13,
            "durationBonus":1.25
         },
         8:{
            "description":"1 Day",
            "duration":86400,
            "successChance":4 / 5,
            "durationBonus":1
         },
         9:{
            "description":"2 Days",
            "duration":172800,
            "successChance":2 / 3,
            "durationBonus":0.8
         }
      };
      
      public static const REWARD_TYPES_COUNT:Number = 6;
      
      public static const rewardTypes:Object = {
         1:{"description":"New Mercenary"},
         2:{"description":"Gold"},
         3:{"description":"Hero Souls"},
         4:{"description":"Relics"},
         5:{"description":"Random Skill Activations"},
         6:{"description":"Rubies"}
      };
       
      public const RECRUIT_TIMER_DURATION:Number = 28800000;
      
      public var mercenaries:Object;
      
      public var startRecruitTime:Number;
      
      public var questRoller:Random;
      
      public var mercRoller:Random;
      
      public var slot0Roller:Random;
      
      public var slot1Roller:Random;
      
      public var slot2Roller:Random;
      
      public var slot3Roller:Random;
      
      public var slot4Roller:Random;
      
      public var questOptions:Object;
      
      public var hasGivenOneFreeRecruit:Boolean;
      
      public function Mercenaries()
      {
         this.mercenaries = {};
         this.questOptions = {};
         super();
         this.registerDynamicCollection("mercenaries",Mercenary);
         this.registerDynamicNumber("startRecruitTime");
         this.registerDynamicChild("questRoller",Random);
         this.registerDynamicChild("mercRoller",Random);
         this.registerDynamicObject("questOptions");
         this.registerDynamicBoolean("hasGivenOneFreeRecruit");
      }
      
      public function addRandomMercenary() : Mercenary
      {
         var _loc5_:* = undefined;
         var _loc1_:Mercenary = new Mercenary();
         _loc1_.createTime = ServerTimeKeeper.instance.timestamp;
         var _loc2_:Number = this.mercRoller.range(1,2);
         if(_loc2_ == 1)
         {
            _loc1_.name = Mercenary.femaleNames[this.mercRoller.range(1,Mercenary.NAMES_COUNT)];
         }
         else
         {
            _loc1_.name = Mercenary.maleNames[this.mercRoller.range(1,Mercenary.NAMES_COUNT)];
         }
         _loc1_.phrase1 = "";
         _loc1_.phrase2 = Mercenary.deathPhrases[this.mercRoller.range(1,Mercenary.DEATH_PHRASES_COUNT)];
         _loc1_.assetId = Rnd.integer(1,Mercenary.ASSET_TYPES + 1);
         var _loc3_:Object = Mercenary.rarities;
         var _loc4_:Object = {};
         for(_loc5_ in _loc3_)
         {
            _loc4_[_loc5_] = _loc3_[_loc5_]["chance"];
         }
         _loc1_.rarity = this.mercRoller.weightedChoice(_loc4_);
         _loc1_.level = 1;
         _loc1_.experience = 0;
         _loc1_.statId = this.mercRoller.range(1,Mercenary.STATS_COUNT);
         while(_loc1_.statId == 5)
         {
            _loc1_.statId = this.mercRoller.range(1,Mercenary.STATS_COUNT);
         }
         var _loc6_:* = 0;
         while(_loc6_ < 5)
         {
            if(!this.mercenaries.hasOwnProperty(_loc6_))
            {
               _loc1_.slotId = _loc6_;
               this.mercenaries[_loc6_] = _loc1_;
               switch(_loc6_)
               {
                  case 0:
                     _loc1_.roller = this.slot0Roller;
                     break;
                  case 1:
                     _loc1_.roller = this.slot1Roller;
                     break;
                  case 2:
                     _loc1_.roller = this.slot2Roller;
                     break;
                  case 3:
                     _loc1_.roller = this.slot3Roller;
                     break;
                  case 4:
                     _loc1_.roller = this.slot4Roller;
                     break;
               }
               break;
            }
            _loc6_++;
         }
         _loc1_.lastQuestDuration = 0;
         _loc1_.lastQuestRewardQty = 0;
         _loc1_.lastQuestRewardType = 0;
         _loc1_.lastQuestStartTime = 0;
         _loc1_.lastQuestSuccessChance = 0;
         return _loc1_;
      }
      
      public function recruitFreeMercenary() : *
      {
         this.addRandomMercenary();
         this.hasGivenOneFreeRecruit = true;
      }
      
      public function getNewQuests() : Object
      {
         var _loc4_:* = undefined;
         var _loc5_:* = 0;
         var _loc6_:Mercenary = null;
         var _loc7_:* = NaN;
         var _loc8_:* = NaN;
         var _loc9_:* = NaN;
         var _loc10_:* = NaN;
         if(this.questOptions.hasOwnProperty(0))
         {
            return this.questOptions;
         }
         var _loc1_:UserData = CurrentUser.instance as UserData;
         var _loc2_:Object = {};
         var _loc3_:Number = 0;
         for(_loc4_ in this.mercenaries)
         {
            _loc6_ = this.mercenaries[_loc4_] as Mercenary;
            if(_loc6_.lastQuestRewardType == 1)
            {
               _loc3_++;
            }
         }
         _loc5_ = 0;
         while(_loc5_ < 3)
         {
            _loc2_[_loc5_] = {};
            if(this.getMercenaryCount() + _loc3_ < 5 && _loc5_ == 0)
            {
               _loc2_[_loc5_]["durationId"] = 7;
               _loc2_[_loc5_]["successChance"] = 0.9;
               _loc2_[_loc5_]["rewardType"] = 1;
               _loc2_[_loc5_]["rewardQty"] = 1;
            }
            else
            {
               _loc7_ = this.questRoller.range(1,QUEST_DURATIONS_COUNT);
               _loc2_[_loc5_]["durationId"] = _loc7_;
               _loc2_[_loc5_]["successChance"] = questDurations[_loc7_]["successChance"];
               _loc8_ = this.questRoller.range(2,REWARD_TYPES_COUNT);
               _loc2_[_loc5_]["rewardType"] = _loc8_;
               switch(_loc8_)
               {
                  case 2:
                     _loc9_ = 0;
                     _loc10_ = 24;
                     break;
                  case 3:
                     _loc9_ = 0.1 * _loc1_.getPurchaseAscensionHeroSouls();
                     break;
                  case 4:
                     _loc9_ = 1;
                     break;
                  case 5:
                     _loc9_ = 1;
                     break;
                  case 6:
                     _loc9_ = 1;
                     break;
               }
               if(_loc8_ == 2)
               {
                  _loc2_[_loc5_]["rewardQty"] = _loc10_ * questDurations[_loc7_]["duration"] / 86400 * questDurations[_loc7_]["durationBonus"];
               }
               else
               {
                  _loc2_[_loc5_]["rewardQty"] = _loc9_ * questDurations[_loc7_]["duration"] / 86400 * questDurations[_loc7_]["durationBonus"];
               }
            }
            _loc5_++;
         }
         this.questOptions = _loc2_;
         return _loc2_;
      }
      
      public function getMercenaryCount() : Number
      {
         var _loc2_:* = undefined;
         var _loc1_:Number = 0;
         for(_loc2_ in this.mercenaries)
         {
            _loc1_++;
         }
         return _loc1_;
      }
      
      public function deleteMercenaryFromSlot(param1:Number) : *
      {
         this.mercenaries[param1] = null;
         delete this.mercenaries[param1];
         if(this.getMercenaryCount() == 0 && this.hasGivenOneFreeRecruit)
         {
            this.startRecruitTime = ServerTimeKeeper.instance.timestamp;
         }
      }
      
      public function getNewMercenaryFromRecruitTimer(param1:Number) : void
      {
         if(this.getMercenaryCount() == 0 && param1 >= this.startRecruitTime + this.RECRUIT_TIMER_DURATION)
         {
            this.addRandomMercenary();
            this.stopRecruitTime();
         }
      }
      
      public function getElapsedRecruitTime(param1:Number) : Number
      {
         var _loc2_:* = NaN;
         if(this.startRecruitTime > 0)
         {
            _loc2_ = this.startRecruitTime + this.RECRUIT_TIMER_DURATION;
            if(param1 <= this.startRecruitTime)
            {
               return this.RECRUIT_TIMER_DURATION / 1000;
            }
            if(param1 >= _loc2_)
            {
               return 0;
            }
            return (_loc2_ - param1) / 1000;
         }
         return -1;
      }
      
      public function stopRecruitTime() : void
      {
         this.startRecruitTime = 0;
      }
      
      public function getEffectiveMercCount() : int
      {
         var _loc1_:* = 0;
         var _loc2_:Mercenary = null;
         for each(_loc2_ in this.mercenaries)
         {
            if(_loc2_.lastQuestRewardType == 1)
            {
               _loc1_++;
            }
         }
         return this.getMercenaryCount() + _loc1_;
      }
   }
}
