package models
{
   import com.playsaurus.model.Model;
   import it.sephiroth.gettext._;
   import com.gskinner.utils.Rnd;
   import com.playsaurus.utils.StringFormatter;
   import com.playsaurus.utils.CurrentUser;
   
   public class Item extends Model
   {
      
      public static const NUM_TYPES:Number = 6;
      
      public static const itemTypes:Object = {
         1:"sword",
         2:"amulet",
         3:"ring",
         4:"helm",
         5:"gloves"
      };
      
      public static const rarities:Object = {
         1:{
            "name":"Common",
            "multiplier":0.5,
            "chance":5000,
            "color":"#DDDDDD",
            "bgColor":6908265
         },
         2:{
            "name":"Uncommon",
            "multiplier":0.75,
            "chance":2000,
            "color":"#1EFF00",
            "bgColor":946432
         },
         3:{
            "name":"Rare",
            "multiplier":1,
            "chance":800,
            "color":"#0080FF",
            "bgColor":21930
         },
         4:{
            "name":"Epic",
            "multiplier":1.25,
            "chance":300,
            "color":"#B048F8",
            "bgColor":9046497
         },
         5:{
            "name":"Fabled",
            "multiplier":1.5,
            "chance":100,
            "color":"#77FF77",
            "bgColor":52224
         },
         6:{
            "name":"Mythical",
            "multiplier":1.75,
            "chance":25,
            "color":"#BBBBFF",
            "bgColor":7303167
         },
         7:{
            "name":"Legendary",
            "multiplier":2.2,
            "chance":8,
            "color":"#FFFF00",
            "bgColor":14540032
         },
         8:{
            "name":"Transcendent",
            "multiplier":2.6,
            "chance":1,
            "color":"#FF00FF",
            "bgColor":12517567
         }
      };
       
      public var name:String;
      
      public var uid:Number;
      
      public var level:Number;
      
      public var rarity:Number;
      
      public var type:String;
      
      public var imageId:Number;
      
      public var bonusType1:Number;
      
      public var bonusType2:Number;
      
      public var bonusType3:Number;
      
      public var bonusType4:Number;
      
      public var bonus1Level:Number;
      
      public var bonus2Level:Number;
      
      public var bonus3Level:Number;
      
      public var bonus4Level:Number;
      
      public var bonus1Distribution:Number;
      
      public var bonus2Distribution:Number;
      
      public var bonus3Distribution:Number;
      
      public var bonus4Distribution:Number;
      
      public var isNew:Boolean = true;
      
      public var upgradeCount:Number;
      
      public function Item()
      {
         super();
         this.registerDynamicString("name");
         this.registerDynamicNumber("uid");
         this.registerDynamicNumber("level");
         this.registerDynamicNumber("rarity");
         this.registerDynamicString("type");
         this.registerDynamicNumber("imageId");
         this.registerDynamicNumber("bonusType1");
         this.registerDynamicNumber("bonusType2");
         this.registerDynamicNumber("bonusType3");
         this.registerDynamicNumber("bonusType4");
         this.registerDynamicNumber("bonus1Level");
         this.registerDynamicNumber("bonus2Level");
         this.registerDynamicNumber("bonus3Level");
         this.registerDynamicNumber("bonus4Level");
         this.registerDynamicNumber("bonus1Distribution");
         this.registerDynamicNumber("bonus2Distribution");
         this.registerDynamicNumber("bonus3Distribution");
         this.registerDynamicNumber("bonus4Distribution");
         this.registerDynamicBoolean("isNew");
         this.registerDynamicNumber("upgradeCount");
      }
      
      public function ucaseFirst(param1:String) : String
      {
         return param1.substr(0,1).toUpperCase() + param1.substr(1);
      }
      
      public function generateName() : String
      {
         var _loc1_:ItemImage = new ItemImage();
         _loc1_.id = this.getImageId();
         var _loc2_:ItemBonusType = new ItemBonusType();
         _loc2_.id = this.bonusType1;
         this.name = _("%s of %s",_loc1_.name,this.ucaseFirst(_loc2_.name));
         this.name = this.name.replace("%1$s",_loc1_.name);
         this.name = this.name.replace("%2$s",this.ucaseFirst(_loc2_.name));
         return this.name;
      }
      
      public function getSalvagePoints() : Number
      {
         return Math.ceil(this.level * 10 * rarities[this.rarity].multiplier);
      }
      
      public function generateImageId() : void
      {
         var _loc2_:ItemImage = null;
         var _loc1_:Array = StaticDataWrapper.instance.getImagesForItemType(this.type,this.rarity);
         if(_loc1_.length > 0)
         {
            _loc2_ = _loc1_[Rnd.integer(0,_loc1_.length)];
            this.imageId = _loc2_.id;
         }
         else
         {
            this.imageId = 1;
         }
      }
      
      public function getImageId() : Number
      {
         if(isNaN(this.imageId) || this.imageId == 0)
         {
            this.generateImageId();
         }
         return this.imageId;
      }
      
      public function getLevelText() : String
      {
         var _loc1_:* = _(Item.rarities[this.rarity].name) + "\n";
         _loc1_ = _loc1_ + (_("Level %s",this.level) + "\n\n");
         return _loc1_;
      }
      
      public function getStatsText() : String
      {
         var _loc1_:* = "";
         var _loc2_:ItemBonusType = new ItemBonusType();
         var _loc3_:Number = 1;
         while(_loc3_ <= 4)
         {
            if(this["bonusType" + _loc3_])
            {
               if(_loc3_ != 1)
               {
                  _loc1_ = _loc1_ + "\n\n";
               }
               _loc2_.id = this["bonusType" + _loc3_];
               _loc1_ = _loc1_ + this.getBonusText(this["bonus" + _loc3_ + "Level"],0,_loc2_.ancientId);
            }
            _loc3_++;
         }
         return _loc1_;
      }
      
      public function getTooltip() : Object
      {
         var _loc1_:* = "";
         var _loc2_:* = "";
         _loc2_ = _loc2_ + (StringFormatter.colorize(this.generateName(),Item.rarities[this.rarity].color) + "\n");
         _loc1_ = _loc1_ + this.getLevelText();
         _loc1_ = _loc1_ + this.getStatsText();
         var _loc3_:Object = {
            "header":_loc2_,
            "body":_loc1_
         };
         return _loc3_;
      }
      
      public function getBonusText(param1:Number, param2:Number, param3:Number) : String
      {
         var _loc7_:* = NaN;
         var _loc8_:* = NaN;
         var _loc4_:Ancient = new Ancient();
         _loc4_.id = param3;
         var _loc5_:* = _("+%s Levels to %s",param1 + param2,_loc4_.name) + "\n";
         var _loc6_:UserData = CurrentUser.instance as UserData;
         if(_loc6_.items.getSlotFromItem(this.uid) <= 4)
         {
            _loc7_ = param1;
            _loc8_ = param2;
         }
         else
         {
            _loc7_ = 0;
            _loc8_ = param1 + param2;
         }
         _loc5_ = _loc5_ + StringFormatter.colorize(" (" + _loc6_.ancients.getAncientBonusForItemLevels(param3,_loc7_,_loc8_) + ")","#AAAAAA");
         return _loc5_;
      }
      
      public function getAncientLevelsForBonusType(param1:Number) : *
      {
         var _loc2_:Number = 1;
         while(_loc2_ <= 4)
         {
            if(this["bonusType" + _loc2_] == param1)
            {
               return this["bonus" + _loc2_ + "Level"];
            }
            _loc2_++;
         }
         return 0;
      }
      
      public function upgrade(param1:Object) : *
      {
         var _loc2_:Number = 1;
         while(_loc2_ <= 4)
         {
            if(this["bonusType" + _loc2_])
            {
               this["bonus" + _loc2_ + "Level"] = param1["newStats"][_loc2_];
               this["bonus" + _loc2_ + "Distribution"] = param1["newDistribution"][_loc2_];
            }
            _loc2_++;
         }
         if(param1["levelsRaised"] > 0)
         {
            this.upgradeCount++;
            this.level = this.level + param1["levelsRaised"];
         }
      }
      
      public function migrateItem() : *
      {
         var _loc2_:String = null;
         var _loc6_:* = NaN;
         var _loc1_:ItemBonusType = new ItemBonusType();
         var _loc3_:Object = {};
         var _loc4_:Object = {};
         var _loc5_:Number = 0;
         _loc6_ = 1;
         loop0:
         while(true)
         {
            if(_loc6_ > 4)
            {
               while(_loc5_ < this.level)
               {
                  _loc6_ = 1;
                  while(_loc6_ <= 4)
                  {
                     if(this["bonusType" + _loc6_])
                     {
                        if(this["bonus" + _loc6_ + "Distribution"] < _loc4_[_loc6_])
                        {
                           this["bonus" + _loc6_ + "Distribution"]++;
                           _loc5_++;
                           if(_loc5_ >= this.level)
                           {
                              break;
                           }
                        }
                     }
                     _loc6_++;
                  }
               }
               return;
            }
            if(this["bonusType" + _loc6_])
            {
               _loc1_.id = this["bonusType" + _loc6_];
               _loc2_ = "bonus" + _loc6_ + "Level";
               switch(_loc1_.scaling)
               {
                  case "linear":
                     _loc3_[_loc6_] = this[_loc2_];
                     _loc4_[_loc6_] = this[_loc2_];
                     break;
                  case "quadratic":
                     _loc3_[_loc6_] = Math.pow(this[_loc2_] - 1,2);
                     _loc4_[_loc6_] = Math.pow(this[_loc2_],2);
                     break;
                  case "cubic":
                     _loc3_[_loc6_] = Math.pow(this[_loc2_] - 1,3);
                     _loc4_[_loc6_] = Math.pow(this[_loc2_],3);
                     break;
                  default:
                     break loop0;
               }
               _loc5_ = _loc5_ + _loc3_[_loc6_];
               this["bonus" + _loc6_ + "Distribution"] = _loc3_[_loc6_];
            }
            _loc6_++;
         }
         throw new Error("Unknown scaling type \'" + _loc1_.scaling + "\'");
      }
      
      public function getUpgradeData() : Object
      {
         var _loc4_:String = null;
         var _loc1_:* = {};
         _loc1_["newStats"] = {};
         _loc1_["newDistribution"] = {};
         _loc1_["newLevelText"] = "";
         _loc1_["newStatsText"] = "";
         var _loc2_:* = "";
         var _loc3_:ItemBonusType = new ItemBonusType();
         var _loc5_:Number = 0;
         var _loc6_:Number = 0;
         var _loc7_:Number = 0;
         var _loc8_:Number = 1;
         loop0:
         while(true)
         {
            if(_loc8_ > 4)
            {
               if(!this.upgradeCount)
               {
                  this.upgradeCount = 0;
               }
               switch(_loc5_)
               {
                  case 1:
                     _loc7_ = 1;
                     break;
                  case 2:
                     _loc7_ = 1.3;
                     break;
                  case 3:
                     _loc7_ = 1.6;
                     break;
                  case 4:
                     _loc7_ = 2;
                     break;
               }
               _loc1_["newLevelText"] = _loc1_["newLevelText"] + (_(Item.rarities[this.rarity].name) + "\n");
               _loc1_["newLevelText"] = _loc1_["newLevelText"] + (_("Level %s",this.level + _loc5_) + "\n\n");
               _loc1_["newStatsText"] = _loc1_["newStatsText"] + _loc2_;
               _loc1_["upgradeCost"] = Math.ceil(Math.pow(2,this.upgradeCount) * _loc7_);
               _loc1_["levelsRaised"] = _loc5_;
               return _loc1_;
            }
            if(this["bonusType" + _loc8_])
            {
               _loc3_.id = this["bonusType" + _loc8_];
               _loc4_ = "bonus" + _loc8_ + "Level";
               if(this.level + _loc5_ >= 50)
               {
                  _loc6_ = this[_loc4_];
                  _loc1_["newDistribution"][_loc8_] = this["bonus" + _loc8_ + "Distribution"];
               }
               else
               {
                  _loc5_++;
                  switch(_loc3_.scaling)
                  {
                     case "linear":
                        _loc6_ = this["bonus" + _loc8_ + "Distribution"] + 1;
                        break;
                     case "quadratic":
                        _loc6_ = Math.ceil(Math.sqrt(this["bonus" + _loc8_ + "Distribution"] + 1));
                        break;
                     case "cubic":
                        _loc6_ = Math.ceil(Math.pow(this["bonus" + _loc8_ + "Distribution"] + 1,1 / 3));
                        break;
                     default:
                        break loop0;
                  }
                  if(_loc3_.maxLevel > 0 && _loc3_.maxLevel < _loc6_)
                  {
                     _loc6_ = _loc3_.maxLevel;
                     _loc5_--;
                  }
                  _loc1_["newDistribution"][_loc8_] = this["bonus" + _loc8_ + "Distribution"] + 1;
               }
               _loc1_["newStats"][_loc8_] = _loc6_;
               _loc2_ = _loc2_ + (this.getBonusText(this[_loc4_],_loc6_ - this[_loc4_],_loc3_.ancientId) + "\n\n");
            }
            _loc8_++;
         }
         throw new Error("Unknown scaling type \'" + _loc3_.scaling + "\'");
      }
   }
}
