package models
{
   import com.playsaurus.model.DynamicCollectionContainer;
   import com.playsaurus.random.Random;
   import com.playsaurus.utils.CurrentUser;
   import com.playsaurus.staticData.StaticData;
   import com.doogog.utils.MiscUtils;
   import com.playsaurus.utils.Search;
   
   public class Items extends DynamicCollectionContainer
   {
      
      public static const MAX_SLOTS:Number = 200;
       
      public var items:Object;
      
      public var slots:Object;
      
      public var equipmentSlots:Number;
      
      public var ascensionItemsRoller:Random;
      
      public var guildItemsRoller:Random;
      
      public var bonusZoneRoller:Random;
      
      public var gotAscensionItem:Boolean;
      
      public var salvagePoints:Number = 0;
      
      public function Items()
      {
         this.items = {};
         this.slots = {};
         super();
         this.registerDynamicCollection("items",Item);
         this.registerDynamicObject("slots");
         this.registerDynamicNumber("equipmentSlots");
         this.registerDynamicNumber("salvagePoints");
         this.registerDynamicBoolean("gotAscensionItem");
         this.registerDynamicChild("ascensionItemsRoller",Random);
         this.registerDynamicChild("guildItemsRoller",Random);
         this.registerDynamicChild("bonusZoneRoller",Random);
      }
      
      public function getItem(param1:Number) : Item
      {
         if(!this.items.hasOwnProperty(param1))
         {
            throw new Error("Item \'" + String(param1) + "\' does not exist in inventory.");
         }
         return this.items[param1];
      }
      
      public function deleteItem(param1:Number) : void
      {
         var _loc3_:* = undefined;
         if(!this.items.hasOwnProperty(param1))
         {
            throw new Error("Item \'" + String(param1) + "\' does not exist in inventory.");
         }
         var _loc2_:Item = this.getItem(param1);
         this.salvagePoints = this.salvagePoints + _loc2_.getSalvagePoints();
         delete this.items[param1];
         for(_loc3_ in this.slots)
         {
            if(param1 == this.slots[_loc3_])
            {
               delete this.slots[_loc3_];
            }
         }
      }
      
      public function getFreeSlot(param1:Boolean = false) : Number
      {
         var _loc2_:Number = 1;
         if(param1)
         {
            _loc2_ = this.equipmentSlots + 1;
         }
         var _loc3_:* = _loc2_;
         while(_loc3_ <= MAX_SLOTS)
         {
            if(!this.slots.hasOwnProperty(_loc3_))
            {
               return _loc3_;
            }
            _loc3_++;
         }
         trace("No free slots");
         return -1;
      }
      
      public function addItem(param1:Item) : Number
      {
         if(param1 == null)
         {
            return -1;
         }
         var _loc2_:Number = this.appendToCollection("items",param1);
         param1.uid = _loc2_;
         (CurrentUser.instance as UserData).totalRelicsReceived++;
         var _loc3_:Number = this.getFreeSlot();
         if(_loc3_ != -1)
         {
            this.moveItem(_loc2_,_loc3_);
         }
         return _loc2_;
      }
      
      public function moveUnslottedItems() : void
      {
         var _loc1_:Item = null;
         var _loc2_:* = NaN;
         for each(_loc1_ in this.items)
         {
            if(this.getSlotFromItem(_loc1_.uid) == null)
            {
               _loc2_ = this.getFreeSlot();
               if(_loc2_ != -1)
               {
                  this.moveItem(_loc1_.uid,_loc2_);
               }
            }
         }
      }
      
      public function getHighestLevelItem() : Number
      {
         var _loc2_:Item = null;
         var _loc1_:Number = 0;
         for each(_loc2_ in this.items)
         {
            if(_loc2_.level > _loc1_)
            {
               _loc1_ = _loc2_.level;
            }
         }
         return _loc1_;
      }
      
      public function getNextAscensionItem(param1:Boolean = false) : Item
      {
         var _loc9_:* = undefined;
         var _loc10_:* = undefined;
         var _loc11_:Object = null;
         var _loc12_:ItemBonusType = null;
         var _loc13_:* = NaN;
         var _loc14_:* = NaN;
         var _loc18_:* = undefined;
         var _loc19_:* = NaN;
         var _loc20_:* = undefined;
         var _loc21_:String = null;
         var _loc22_:* = NaN;
         var _loc2_:Number = (CurrentUser.instance as UserData).numWorldResets;
         var _loc3_:Number = (CurrentUser.instance as UserData).highestFinishedZonePersist;
         var _loc4_:Number = (CurrentUser.instance as UserData).ancients.startingAscensionLevel;
         var _loc5_:Number = (CurrentUser.instance as UserData).highestFinishedZone;
         var _loc6_:Item = new Item();
         if(param1) // true when bought or quested, false when natural
         {
            _loc18_ = Math.ceil(50 * (1 - Math.pow(1.2,-((_loc3_ - 100) / 100))));
            _loc18_ = Math.max(1,_loc18_);
            _loc18_ = Math.min(this.getHighestLevelItem() + 5,_loc18_);
            _loc19_ = this.ascensionItemsRoller.range(Math.ceil(_loc18_ * 0.75),_loc18_); // 0-1
         }
         else
         {
            _loc19_ = Math.ceil(50 * (1 - Math.pow(1.2,-((_loc5_ - 100) / 100))));
            _loc19_ = Math.max(1,_loc19_);
         }
         _loc6_.level = _loc19_;
         var _loc7_:Object = Item.rarities;
         var _loc8_:Object = {};
         for(_loc9_ in _loc7_)
         {
            _loc8_[_loc9_] = _loc7_[_loc9_]["chance"];
         }
         _loc10_ = this.ascensionItemsRoller.weightedChoice(_loc8_); //1-2
         _loc6_.rarity = _loc10_;
         _loc11_ = {};
         for each(_loc12_ in StaticData.instance.getAll(ItemBonusType))
         {
            _loc11_[_loc12_.id] = 1;
         }
         switch(_loc6_.level)
         {
            case 1:
               _loc13_ = 1;
               break;
            case 2:
               _loc13_ = this.ascensionItemsRoller.weightedChoice({
                  1:6,
                  2:5
               });
               break;
            case 3:
               _loc13_ = this.ascensionItemsRoller.weightedChoice({
                  1:6,
                  2:5,
                  3:4
               });
               break;
            default:
               _loc13_ = this.ascensionItemsRoller.weightedChoice({ //+1 2-3
                  1:6,
                  2:5,
                  3:4,
                  4:3
               });
         }
         _loc14_ = 0;
         while(_loc14_ < _loc13_)
         {
            _loc20_ = this.ascensionItemsRoller.weightedChoice(_loc11_); //+1-4 3-7
            delete _loc11_[_loc20_];
            _loc6_["bonusType" + (_loc14_ + 1)] = _loc20_;
            _loc14_++;
         }
         var _loc15_:Array = [];
         var _loc16_:* = _loc6_.level;
         _loc14_ = 0;
         while(_loc14_ < _loc13_)
         {
            if(_loc14_ + 1 == _loc13_)
            {
               _loc15_[_loc14_] = _loc16_;
            }
            else
            {
               _loc15_[_loc14_] = this.ascensionItemsRoller.range(1,_loc16_ - (_loc13_ - _loc14_) + 1); //+0-3 3-10
               if(isNaN(_loc15_[_loc14_]))
               {
                  throw new Error("NAN!!!");
               }
            }
            _loc16_ = _loc16_ - _loc15_[_loc14_];
            _loc14_++;
         }
         _loc15_.sort(Array.NUMERIC);
         _loc15_.reverse();
         _loc14_ = 0;
         loop4:
         while(true)
         {
            if(_loc14_ >= _loc13_)
            {
               var _loc17_:Number = MiscUtils.lengthOfObject(Item.itemTypes);
               _loc6_.type = Item.itemTypes[this.ascensionItemsRoller.range(1,_loc17_)]; //+1 4-11
               _loc6_.generateName();
               return _loc6_;
            }
            _loc12_ = new ItemBonusType();
            _loc12_.id = _loc6_["bonusType" + (_loc14_ + 1)];
            _loc21_ = "bonus" + (_loc14_ + 1) + "Level";
            switch(_loc12_.scaling)
            {
               case "linear":
                  _loc6_[_loc21_] = _loc15_[_loc14_];
                  break;
               case "quadratic":
                  _loc6_[_loc21_] = Math.ceil(Math.sqrt(_loc15_[_loc14_]));
                  break;
               case "cubic":
                  _loc6_[_loc21_] = Math.ceil(Math.pow(_loc15_[_loc14_],1 / 3));
                  break;
               default:
                  break loop4;
            }
            if(_loc12_.maxLevel > 0 && _loc12_.maxLevel < _loc6_[_loc21_])
            {
               _loc22_ = _loc6_[_loc21_] - _loc12_.maxLevel;
               _loc6_[_loc21_] = _loc12_.maxLevel;
               _loc6_.level = _loc6_.level - _loc22_;
            }
            _loc14_++;
         }
         throw new Error("Unknown scaling type \'" + _loc12_.scaling + "\'");
      }
      
      public function getSlotFromItem(param1:Number) : *
      {
         var _loc2_:* = undefined;
         for(_loc2_ in this.slots)
         {
            if(this.slots[_loc2_] == param1)
            {
               return _loc2_;
            }
         }
         return null;
      }
      
      public function getItemInSlot(param1:Number) : Item
      {
         if(this.slots.hasOwnProperty(param1))
         {
            return this.items[this.slots[param1]];
         }
         return null;
      }
      
      public function moveItem(param1:Number, param2:Number) : void
      {
         if(param2 < 1 || param2 > MAX_SLOTS)
         {
            throw new Error("targetSlotId has to be between 1 and " + MAX_SLOTS);
         }
         var _loc3_:String = null;
         var _loc4_:Number = this.getSlotFromItem(param1);
         if(this.slots.hasOwnProperty(param2))
         {
            _loc3_ = this.slots[param2];
         }
         this.slots[param2] = param1;
         if(_loc3_)
         {
            this.slots[_loc4_] = _loc3_;
         }
         else if(_loc4_)
         {
            delete this.slots[_loc4_];
         }
      }
      
      public function isEquipmentSlot(param1:Number) : Boolean
      {
         if(param1 < 1 || param1 > MAX_SLOTS)
         {
            throw new Error("slotId has to be between 1 and " + MAX_SLOTS);
         }
         return param1 <= this.equipmentSlots;
      }
      
      public function hasNewItem() : Boolean
      {
         var _loc1_:Item = null;
         for each(_loc1_ in this.items)
         {
            if(_loc1_.isNew)
            {
               return true;
            }
         }
         return false;
      }
      
      public function onAscend() : void
      {
         this.bonusZoneRoller.rand();
         this.bonusZoneRoller.rand();
         this.bonusZoneRoller.rand();
         this.bonusZoneRoller.rand();
         this.gotAscensionItem = false;
         this.salvageAllJunk();
      }
      
      public function onGetAscensionItem() : Item
      {
         this.gotAscensionItem = true;
         var _loc1_:Item = this.getNextAscensionItem();
         this.addItem(_loc1_);
         return _loc1_;
      }
      
      public function buyAscensionItem() : Item
      {
         var _loc1_:Item = this.getNextAscensionItem(true);
         this.addItem(_loc1_);
         this.bonusZoneRoller.rand();
         this.bonusZoneRoller.rand();
         this.bonusZoneRoller.rand();
         this.bonusZoneRoller.rand();
         return _loc1_;
      }
      
      public function getBonusItemZone() : Number
      {
         if((CurrentUser.instance as UserData).numWorldResets == 0)
         {
            return -1;
         }
         if(this.gotAscensionItem == true)
         {
            return -1;
         }
         var _loc1_:Random = new Random();
         _loc1_.fromJsonObject(this.bonusZoneRoller);
         var _loc2_:Number = 0;
         var _loc3_:Number = (CurrentUser.instance as UserData).ancients.startingAscensionLevel;
         var _loc4_:Number = Math.ceil((CurrentUser.instance as UserData).highestFinishedZonePersist * 0.66);
         if(_loc4_ - _loc3_ <= Math.ceil(_loc4_ * 0.3))
         {
            _loc4_ = _loc3_ + Math.ceil(_loc4_ * 0.3);
         }
         _loc3_ = Math.max(99,_loc3_);
         do
         {
            _loc2_ = _loc1_.range(_loc3_,Math.max(101,_loc4_));
         }
         while(_loc2_ % 5 == 0);
         
         return _loc2_;
      }
      
      public function getTotalBonusesForBonusType(param1:Number) : *
      {
         var _loc4_:Item = null;
         var _loc2_:Number = 0;
         var _loc3_:Number = 1;
         while(_loc3_ <= this.equipmentSlots)
         {
            _loc4_ = this.getItemInSlot(_loc3_);
            if(_loc4_)
            {
               _loc2_ = _loc2_ + _loc4_.getBonusAmountForBonusType(param1);
            }
            _loc3_++;
         }
         return _loc2_;
      }
      
      public function get length() : int
      {
         return Search.countObject(this.items);
      }
      
      public function get salvageLength() : int
      {
         return Math.max(0,this.length - this.equipmentSlots);
      }
      
      public function getJunkPileSalvagePoints() : Number
      {
         var _loc3_:Item = null;
         var _loc1_:Number = 0;
         var _loc2_:Number = this.equipmentSlots + 1;
         while(_loc2_ <= MAX_SLOTS)
         {
            _loc3_ = this.getItemInSlot(_loc2_);
            if(_loc3_)
            {
               _loc1_ = _loc1_ + _loc3_.getSalvagePoints();
            }
            _loc2_++;
         }
         return _loc1_;
      }
      
      public function salvageAllJunk() : void
      {
         var _loc2_:Item = null;
         var _loc1_:Number = this.equipmentSlots + 1;
         while(_loc1_ <= MAX_SLOTS)
         {
            _loc2_ = this.getItemInSlot(_loc1_);
            if(_loc2_)
            {
               this.deleteItem(_loc2_.uid);
            }
            _loc1_++;
         }
      }
   }
}
