package models
{
   import com.playsaurus.model.BaseUserData;
   import com.bigDecimal.com.BigDecimal;
   import com.playsaurus.random.Random;
   import heroclickerlib.managers.Attributes;
   import heroclickerlib.managers.ZoneManager;
   import heroclickerlib.world.Comboer;
   import com.playsaurus.utils.VariableWatcher;
   import com.reygazu.anticheat.events.CheatManagerEvent;
   import com.doogog.utils.MiscUtils;
   import com.playsaurus.staticData.StaticData;
   import com.playsaurus.utils.ServerTimeKeeper;
   import com.doogog.utils.GenericEvent;
   import flash.utils.Timer;
   import flash.events.TimerEvent;
   import com.playsaurus.kong.KongAPIWrapper;
   import heroclickerlib.managers.GameAnalyticsManager;
   import heroclickerlib.managers.SaveManager;
   import it.sephiroth.gettext._;
   import heroclickerlib.managers.Formulas;
   import com.playsaurus.utils.RandomString;
   import flash.events.Event;
   import com.gskinner.utils.Rnd;
   import com.adobe.crypto.MD5;
   
   public class UserData extends BaseUserData
   {
      
      public static const MOBILE_PLATFORM:String = "mobile";
      
      public static const WEB_PLATFORM:String = "web";
      
      public static const NUM_RAIDS_PER_DAY:Number = 3;
      
      public static const RAID_COOLDOWN:Number = 1000 * 60 * 60;
      
      public static const AD_BONUS_DURATION:Number = 1000 * 60 * 60 * 4;
      
      public static const AD_BONUS_MULTIPLIER:Number = 2;
      
      public static const RESET_GAME:String = "reset_game";
      
      public static const TRACK_EVENT:String = "track_event";
      
      public static const TRACK_ADJUST_EVENT:String = "track_adjust_event";
      
      public static const GOT_ACHIEVEMENT:String = "got_achievement";
      
      public static const TRIPLE_GOLD:String = "triple_gold";
      
      public static const CHANCE_OF_TREASURE_MONSTER:Number = 0.01;
      
      public static const BOSS_HP_MULTIPLIER:Number = 10;
      
      public static const TREASURE_MULTIPLIER:Number = 10;
      
      public static const EVT_RUBY_ADD:String = "evt_ruby_add";
      
      public static var heroLateGameUpgrades:Object = {
         "2":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "3":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "4":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "5":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "6":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "7":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "8":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "9":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "10":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "11":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "12":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "13":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "14":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "15":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "16":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "17":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "18":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "19":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "20":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "21":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "22":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "23":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "24":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "25":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "26":[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "27":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "28":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "29":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "30":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "31":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "32":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "33":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "34":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "35":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "36":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "37":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "38":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "39":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4],
         "40":[4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,4,4,4,4]
      };
       
      public var gold:BigDecimal;
      
      public var rubies:Number = 0;
      
      public var historicRubies:Number = 0;
      
      public var heroCollection:HeroCollection;
      
      public var ancients:Ancients;
      
      public var actionBar:ActionBar;
      
      public var achievements:Object;
      
      public var upgrades:Object;
      
      public var highestFinishedZone:int;
      
      public var highestFinishedZonePersist:int;
      
      public var currentZoneHeight:int;
      
      public var totalClicks:Number = 0;
      
      public var totalGold:BigDecimal;
      
      public var highestGold:BigDecimal;
      
      public var totalGoldThisGame:BigDecimal;
      
      public var totalKills:Number = 0;
      
      public var totalBossKills:Number = 0;
      
      public var totalUpgrades:Number = 0;
      
      public var totalHeroLevels:Number = 0;
      
      public var totalCrits:Number = 0;
      
      public var totalPrimalsKilled:Number = 0;
      
      public var mostClicksPerSecond:Number = 0;
      
      public var mostCritsPerSecond:Number = 0;
      
      public var maxDps:BigDecimal;
      
      public var soundsEnabled:Boolean = true;
      
      public var musicEnabled:Boolean = true;
      
      public var stageQuality:Boolean = true;
      
      public var clickMultiplier:Number = 1.0;
      
      public var allDpsMultiplier:Number = 1.0;
      
      public var goldMultiplier:Number = 1.0;
      
      public var clickDpsPercent:Number = 0.0;
      
      public var abaddonMultiplier:Number = 1.0;
      
      public var startTimestamp:Number = 0.0;
      
      public var numWorldResets:Number = 0;
      
      public var goldSacrificedInWorldResets:Number = 0;
      
      public var dpsSacrificedInWorldResets:Number = 0;
      
      public var skillCooldowns:Object;
      
      public var skillFreeClicks:Number = 0;
      
      public var skillFreeClicksEnd:Number = 0;
      
      public var skillDpsMultiplier:Number = 1.0;
      
      public var skillDpsMultiplierEnd:Number = 0;
      
      public var skillCriticalClickChance:Number = 0;
      
      public var skillCriticalClickChanceEnd:Number = 0;
      
      public var skillGoldBonus:Number = 0;
      
      public var skillGoldBonusEnd:Number = 0;
      
      public var skillDouble:Boolean = false;
      
      public var skillWildGold:Number = 0;
      
      public var skillWildGoldEnd:Number = 0;
      
      public var skillClickMultiplier:Number = 1.0;
      
      public var skillClickMultiplierEnd:Number = 0;
      
      public var lastSkillUsed:Number = 0;
      
      public var secondToLastSkillUsed:Number = 0;
      
      public var baseCriticalClickChance:Number = 0.0;
      
      public var criticalMultiplier:Number = 10.0;
      
      public var worldGoldBonus:Number = 0.0;
      
      public var treasureChestsKilled:Number = 0;
      
      public var heroSouls:Number = 0;
      
      public var totalHeroSouls:Number = 0;
      
      public var baseClickDamage:Number = 1;
      
      public var tutorialArrow:Number = 0;
      
      public var activityCount:Number = 0;
      
      public var goldFloatersDisabled:Boolean;
      
      public var damageFloatersDisabled:Boolean;
      
      public var tinyMonsters:Boolean;
      
      public var hideRelicPopups:Boolean;
      
      public var primalNumberGenerator:Random;
      
      public var epicRoller:Random;
      
      public var devGifts:Object;
      
      public var finishedPrimals:Object;
      
      public var uniqueId:String = "";
      
      public var passwordHash:String = "";
      
      public var prevLoginTimestamp:Number = 0;
      
      public var timelapses:Number = 0;
      
      public var kongId:String = "";
      
      public var soulsSpent:Number = 0;
      
      public var primalSouls:Number = 0;
      
      public var creationTimestamp:Number = 0;
      
      public var epicHeroReceivedUpTo:Number = 0;
      
      public var epicHeroSeed:Number = 0;
      
      public var shouldShowHeroDps:Boolean;
      
      public var purchaseRecord:Object;
      
      public var highestHistoricAncients:Number = 0;
      
      public var didClickOnAncientsTab:Boolean = false;
      
      public var didClickOnMercenaryTab:Boolean = false;
      
      public var didClickOnShopTab:Boolean = false;
      
      public var freeRespecs:Number = 0;
      
      public var numberDisplayMode:Boolean;
      
      public var isCheater:Boolean = false;
      
      public var readPatchNumber:String = "";
      
      public var lifetimeDarkRitualClicks:Number = 0;
      
      public var darkRitualClicks:Number = 0;
      
      public var platform:String = null;
      
      public var collectedAchievements:Object = null;
      
      public var usedSkills:Object = null;
      
      public var hasSeenZone100Tip:Object = null;
      
      public var persistentVars:PersistentVars;
      
      public var adCampaign:String = null;
      
      public var adRetargetId:String = null;
      
      public var adRetargetTime:Number = 0;
      
      public var paidForRubyMultiplier:Boolean = false;
      
      public var items:Items = null;
      
      public var totalRelicsReceived:Number = 0;
      
      public var titanDamage:Number;
      
      public var ticketsUsed:String;
      
      public var lastGuildRankUpdatedTime:Number;
      
      public var lastRaidTimestamp:Number = 0;
      
      public var numRaidsToday:Number = 0;
      
      public var collectedRaidRewardDates:Object;
      
      public var language:String;
      
      public var titanTypesDefeated:Object;
      
      public var purchaseHashes:Object;
      
      public var syncedGameServices:Boolean;
      
      public var lastAdBonusTimestamp:Number;
      
      public var heroEntrySizes:Object;
      
      public var ancientEntrySizes:Object;
      
      public var purchasedTitanFightExpTime:Number;
      
      public var totalHeroSoulsFromAscensions:Number = 0;
      
      public var hasJoinedGuild:Boolean = false;
      
      public var mercenaries:Mercenaries;
      
      public var personalSales:PersonalSales;
      
      public var totalMercenariesBuried:Number = 0;
      
      public var totalMercenariesRevived:Number = 0;
      
      public var goldQuestsCompleted:Number = 0;
      
      public var relicQuestsCompleted:Number = 0;
      
      public var rubyQuestsCompleted:Number = 0;
      
      public var skillQuestsCompleted:Number = 0;
      
      public var heroSoulQuestsCompleted:Number = 0;
      
      public var total5MinuteQuests:Number = 0;
      
      public var leeroyJenkinsBuried:Number = 0;
      
      public var highestMercenaryLevelEver:Number = 0;
      
      public var rarestMercenaryEver:Number = 1;
      
      public var mercenaryCount:Number = 0;
      
      public var needsAncientEntriesRepositioned:Boolean = false;
      
      public var shiftEnabled:Boolean = false;
      
      public var ctrlEnabled:Boolean = false;
      
      public var zKeyEnabled:Boolean = false;
      
      public var qKeyEnabled:Boolean = false;
      
      private var numSkillsPressedRecently = 0;
      
      public var progressMode:Boolean;
      
      public var needsActionBarUpdate:Boolean = false;
      
      public var clickCombo:Number;
      
      public var heroTabScrollPercent:Number;
      
      public var heroTabScrollReset:Boolean = false;
      
      public var ancientTabScrollPercent:Number;
      
      public var toggle:Number = 0;
      
      public var heroTabToggle:Number = 0;
      
      public var ancientTabToggle:Number = 0;
      
      public var email:String = "";
      
      public var loginValidated:Boolean = false;
      
      public var isTestUser:Boolean = false;
      
      public var latestBuildLoaded:Number = 0;
      
      public var unixTimestamp:Number;
      
      public var initialUnixTimestamp:Number;
      
      public var lastClickTimeIgnoreIdle:Number = 0;
      
      public var debug:Boolean = false;
      
      private var _attributes:Attributes;
      
      private var _zoneManager:ZoneManager;
      
      private var _comboer:Comboer;
      
      private var _variableWatcher:VariableWatcher;
      
      public var instaClickKill:Boolean;
      
      private var _staticAchievements:Object;
      
      private var _staticHeroes:Object;
      
      private var _hasUncollectedAchievement:Boolean;
      
      public var goldModified:Boolean = true;
      
      public var lastClickTime:Number = 0;
      
      private var clicksInLastSecond:Array;
      
      private var critsInLastSecond:Array;
      
      public var goldEachSecond:Array;
      
      public var currentSecond:Number = 0;
      
      public function UserData()
      {
         this.gold = new BigDecimal(0);
         this.achievements = {};
         this.upgrades = {};
         this.totalGold = new BigDecimal(0);
         this.highestGold = new BigDecimal(0);
         this.totalGoldThisGame = new BigDecimal(0);
         this.maxDps = new BigDecimal(0);
         this.skillCooldowns = {};
         this.devGifts = {};
         this.finishedPrimals = {};
         this.purchaseRecord = {};
         this.collectedRaidRewardDates = {};
         this.titanTypesDefeated = {};
         this.purchaseHashes = {};
         this.heroEntrySizes = {};
         this.ancientEntrySizes = {};
         this.clicksInLastSecond = [];
         this.critsInLastSecond = [];
         this.goldEachSecond = [];
         super();
         registerDynamicNumber("uid");
         registerDynamicBigDecimal("gold");
         registerDynamicNumber("rubies");
         registerDynamicNumber("historicRubies");
         registerDynamicChild("heroCollection",HeroCollection);
         registerDynamicChild("ancients",Ancients);
         registerDynamicChild("actionBar",ActionBar);
         registerDynamicObject("achievements");
         registerDynamicObject("upgrades");
         registerDynamicObject("highestFinishedZone");
         registerDynamicObject("highestFinishedZonePersist");
         registerDynamicObject("currentZoneHeight");
         registerDynamicNumber("totalClicks");
         registerDynamicBigDecimal("totalGold");
         registerDynamicBigDecimal("highestGold");
         registerDynamicBigDecimal("totalGoldThisGame");
         registerDynamicNumber("totalKills");
         registerDynamicNumber("totalBossKills");
         registerDynamicNumber("totalUpgrades");
         registerDynamicNumber("totalHeroLevels");
         registerDynamicNumber("totalCrits");
         registerDynamicNumber("totalPrimalsKilled");
         registerDynamicNumber("mostClicksPerSecond");
         registerDynamicNumber("mostCritsPerSecond");
         registerDynamicBigDecimal("maxDps");
         registerDynamicBoolean("soundsEnabled");
         registerDynamicBoolean("musicEnabled");
         registerDynamicBoolean("stageQuality");
         registerDynamicNumber("clickMultiplier");
         registerDynamicNumber("allDpsMultiplier");
         registerDynamicNumber("goldMultiplier");
         registerDynamicNumber("clickDpsPercent");
         registerDynamicNumber("abaddonMultiplier");
         registerDynamicNumber("startTimestamp");
         registerDynamicNumber("numWorldResets");
         registerDynamicNumber("goldSacrificedInWorldResets");
         registerDynamicNumber("dpsSacrificedInWorldResets");
         registerDynamicObject("skillCooldowns");
         registerDynamicNumber("skillFreeClicks");
         registerDynamicNumber("skillFreeClicksEnd");
         registerDynamicNumber("skillDpsMultiplier");
         registerDynamicNumber("skillDpsMultiplierEnd");
         registerDynamicNumber("skillCriticalClickChance");
         registerDynamicNumber("skillCriticalClickChanceEnd");
         registerDynamicNumber("skillGoldBonus");
         registerDynamicNumber("skillGoldBonusEnd");
         registerDynamicBoolean("skillDouble");
         registerDynamicNumber("skillWildGold");
         registerDynamicNumber("skillWildGoldEnd");
         registerDynamicNumber("skillClickMultiplier");
         registerDynamicNumber("skillClickMultiplierEnd");
         registerDynamicNumber("lastSkillUsed");
         registerDynamicNumber("secondToLastSkillUsed");
         registerDynamicNumber("baseCriticalClickChance");
         registerDynamicNumber("criticalMultiplier");
         registerDynamicNumber("worldGoldBonus");
         registerDynamicNumber("treasureChestsKilled");
         registerDynamicNumber("heroSouls");
         registerDynamicNumber("totalHeroSouls");
         registerDynamicNumber("baseClickDamage");
         registerDynamicNumber("tutorialArrow");
         registerDynamicNumber("activityCount");
         registerDynamicBoolean("goldFloatersDisabled");
         registerDynamicBoolean("damageFloatersDisabled");
         registerDynamicBoolean("tinyMonsters");
         registerDynamicBoolean("hideRelicPopups");
         registerDynamicChild("primalNumberGenerator",Random);
         registerDynamicChild("epicRoller",Random);
         registerDynamicObject("devGifts");
         registerDynamicObject("finishedPrimals");
         registerDynamicString("uniqueId");
         registerDynamicString("passwordHash");
         registerDynamicNumber("prevLoginTimestamp");
         registerDynamicNumber("timelapses");
         registerDynamicString("kongId");
         registerDynamicNumber("soulsSpent");
         registerDynamicNumber("primalSouls");
         registerDynamicNumber("creationTimestamp");
         registerDynamicNumber("epicHeroReceivedUpTo");
         registerDynamicNumber("epicHeroSeed");
         registerDynamicBoolean("shouldShowHeroDps");
         registerDynamicObject("purchaseRecord");
         registerDynamicNumber("highestHistoricAncients");
         registerDynamicBoolean("didClickOnAncientsTab");
         registerDynamicBoolean("didClickOnMercenaryTab");
         registerDynamicBoolean("didClickOnShopTab");
         registerDynamicNumber("freeRespecs");
         registerDynamicBoolean("numberDisplayMode");
         registerDynamicBoolean("isCheater");
         registerDynamicString("readPatchNumber");
         registerDynamicNumber("lifetimeDarkRitualClicks");
         registerDynamicNumber("darkRitualClicks");
         registerDynamicBoolean("loginValidated");
         registerDynamicString("email");
         registerDynamicNumber("unixTimestamp");
         registerDynamicObject("collectedAchievements");
         registerDynamicObject("usedSkills");
         registerDynamicChild("persistentVars",PersistentVars);
         registerDynamicBoolean("hasSeenZone100Tip");
         registerDynamicString("adCampaign");
         registerDynamicString("adRetargetId");
         registerDynamicNumber("adRetargetTime");
         registerDynamicBoolean("paidForRubyMultiplier");
         registerDynamicChild("items",Items);
         registerDynamicNumber("totalRelicsReceived");
         registerDynamicNumber("titanDamage");
         registerDynamicString("ticketsUsed");
         registerDynamicNumber("lastGuildRankUpdatedTime");
         registerDynamicString("lastRaidTimestamp");
         registerDynamicNumber("numRaidsToday");
         registerDynamicObject("collectedRaidRewardDates");
         registerDynamicBoolean("debug");
         registerDynamicString("language");
         registerDynamicObject("titanTypesDefeated");
         registerDynamicObject("purchaseHashes");
         registerDynamicBoolean("syncedGameServices");
         registerDynamicNumber("lastAdBonusTimestamp");
         registerDynamicObject("heroEntrySizes");
         registerDynamicObject("ancientEntrySizes");
         registerDynamicNumber("purchasedTitanFightExpTime");
         registerDynamicNumber("totalHeroSoulsFromAscensions");
         registerDynamicBoolean("hasJoinedGuild");
         registerDynamicChild("mercenaries",Mercenaries);
         registerDynamicChild("personalSales",PersonalSales);
         registerDynamicNumber("totalMercenariesBuried");
         registerDynamicNumber("totalMercenariesRevived");
         registerDynamicNumber("goldQuestsCompleted");
         registerDynamicNumber("relicQuestsCompleted");
         registerDynamicNumber("rubyQuestsCompleted");
         registerDynamicNumber("skillQuestsCompleted");
         registerDynamicNumber("heroSoulQuestsCompleted");
         registerDynamicNumber("total5MinuteQuests");
         registerDynamicNumber("leeroyJenkinsBuried");
         registerDynamicNumber("highestMercenaryLevelEver");
         registerDynamicNumber("rarestMercenaryEver");
         registerDynamicNumber("mercenaryCount");
         registerDynamicBoolean("isTestUser");
         registerDynamicBoolean("latestBuildLoaded");
         this._attributes = new Attributes(this);
         this._zoneManager = new ZoneManager(this);
         this._comboer = new Comboer(this);
         this.init();
      }
      
      public function get inWrongVersion() : Boolean
      {
         return this.isTestUser && !HeroClickerMain.TEST_BUILD;
      }
      
      public function get quickLevelUpEnabled() : Boolean
      {
         var _loc1_:* = this.toggle != 0;
         return this.shiftEnabled || this.ctrlEnabled || this.zKeyEnabled || this.qKeyEnabled || _loc1_;
      }
      
      public function get attributes() : Attributes
      {
         return this._attributes;
      }
      
      public function get zoneManager() : ZoneManager
      {
         return this._zoneManager;
      }
      
      public function get comboer() : Comboer
      {
         return this._comboer;
      }
      
      public function get zoneAccessibleLimit() : int
      {
         return this.highestFinishedZone + 1;
      }
      
      public function get goldCeiled() : BigDecimal
      {
         return this.gold.ceil();
      }
      
      public function get variableWatcher() : VariableWatcher
      {
         return this._variableWatcher;
      }
      
      public function get isWeb() : Boolean
      {
         return this.platform == WEB_PLATFORM;
      }
      
      public function get isMobile() : Boolean
      {
         return this.platform == MOBILE_PLATFORM;
      }
      
      public function get hasUncollectedAchievement() : Boolean
      {
         return this._hasUncollectedAchievement;
      }
      
      override public function dispose() : void
      {
         this._variableWatcher.dispose();
         this._variableWatcher.removeEventListener(CheatManagerEvent.CHEAT_DETECTION,this.onCheatDetected);
      }
      
      public function updateMaxDps(param1:BigDecimal) : *
      {
         if(param1.gt(this.maxDps))
         {
            this.maxDps = param1;
         }
      }
      
      public function getAscensionHeroSoulsFromHeroLevels() : Number
      {
         return Math.min(Math.floor(this.totalHeroLevels / 2000));
      }
      
      public function getAscensionHeroSouls() : Number
      {
         return this.getAscensionHeroSoulsFromHeroLevels() + this.primalSouls;
      }
      
      public function getDarkRitualRubies() : Number
      {
         if(this.skillDouble)
         {
            return 4;
         }
         return 2;
      }
      
      public function getPurchaseAscensionHeroSouls() : Number
      {
         var _loc1_:Number = this.highestFinishedZonePersist;
         var _loc2_:Number = this.getPrimalChance() * 0.01;
         var _loc3_:Number = 0;
         var _loc4_:* = 100;
         while(_loc4_ <= _loc1_)
         {
            _loc3_ = _loc3_ + this.getPrimalHeroSoulRewards(_loc4_);
            _loc4_ = _loc4_ + 5;
         }
         _loc3_ = Math.floor(_loc3_ * _loc2_);
         return _loc3_ + 7;
      }
      
      public function getRubyDamageMultiple() : Number
      {
         if(this.paidForRubyMultiplier)
         {
            return 2;
         }
         return 1;
      }
      
      public function purchaseThreeItems() : Array
      {
         var _loc1_:Item = this.items.buyAscensionItem();
         var _loc2_:Item = this.items.buyAscensionItem();
         var _loc3_:Item = this.items.buyAscensionItem();
         return [_loc1_,_loc2_,_loc3_];
      }
      
      public function payForRubyDamageMultiple() : void
      {
         this.paidForRubyMultiplier = true;
      }
      
      public function numHeroes() : Number
      {
         var _loc1_:Number = MiscUtils.lengthOfObject(StaticData.instance.getTable("heroes"));
         return _loc1_;
      }
      
      public function init() : void
      {
         var _loc2_:* = 0;
         if(this.heroCollection == null)
         {
            this.heroCollection = new HeroCollection();
            _loc2_ = 1;
            while(_loc2_ <= this.numHeroes())
            {
               this.heroCollection.addById(_loc2_);
               _loc2_++;
            }
         }
         this.upgrades = {};
         if(this.highestFinishedZone <= 0)
         {
            this.highestFinishedZone = 0;
         }
         this.currentZoneHeight = 1;
         this.progressMode = false;
         this._comboer.reset();
         this._zoneManager.reset();
         this._hasUncollectedAchievement = false;
         this.startTimestamp = ServerTimeKeeper.instance.timestamp;
         dispatchEvent(new GenericEvent(RESET_GAME));
         var _loc1_:Timer = new Timer(1000,0);
         _loc1_.addEventListener(TimerEvent.TIMER,this.perSecondTick,false,0,true);
         _loc1_.start();
         if(!this.primalNumberGenerator)
         {
            this.primalNumberGenerator = new Random();
            this.primalNumberGenerator.srand(ServerTimeKeeper.instance.timestamp % Random.RAND_MAX);
         }
         this._variableWatcher = new VariableWatcher(this);
         if(this.creationTimestamp == 0)
         {
            this.creationTimestamp = ServerTimeKeeper.instance.timestamp;
         }
         Zone.rareSpawnRandom.seed = ServerTimeKeeper.instance.timestamp;
         if(!this.ancients)
         {
            this.ancients = new Ancients();
         }
         if(!this.persistentVars)
         {
            this.persistentVars = new PersistentVars();
         }
         if(!this.actionBar)
         {
            this.actionBar = new ActionBar();
         }
         if(!this.items)
         {
            this.items = new Items();
         }
         if(!this.collectedRaidRewardDates)
         {
            this.collectedRaidRewardDates = {};
         }
         if(!this.mercenaries)
         {
            this.mercenaries = new Mercenaries();
         }
         if(!this.personalSales)
         {
            this.personalSales = new PersonalSales();
         }
      }
      
      public function getMonsterReward(param1:Monster) : BigDecimal
      {
         var _loc2_:Number = this._comboer.getGoldBonus();
         if(_loc2_ > 0.05)
         {
            _loc2_ = 0.05;
         }
         var _loc3_:BigDecimal = param1.goldReward;
         _loc3_ = _loc3_.multiply(new BigDecimal(1 + _loc2_));
         if(Math.random() < this.ancients.tenXGoldChance * 0.01)
         {
            dispatchEvent(new GenericEvent(TRIPLE_GOLD));
            _loc3_ = _loc3_.multiply(new BigDecimal(10));
         }
         if(this.isIdle())
         {
            _loc3_ = _loc3_.multiply(new BigDecimal(this.ancients.idleGoldPercent * 0.01 + 1));
         }
         else if(this._comboer.isClickComboing())
         {
            _loc3_ = _loc3_.multiply(new BigDecimal(this._comboer.getGoldBonus() + 1));
         }
         return _loc3_;
      }
      
      public function killMonster(param1:Monster, param2:Boolean = true) : void
      {
         var _loc3_:* = this.currentZoneHeight % Zone.BOSS_ZONE_MODULUS == 0;
         if(_loc3_)
         {
            if(this.isPrimalLevel(this.currentZoneHeight))
            {
               this.doGetPrimalRewards(this.currentZoneHeight);
            }
            if(this.totalBossKills < 1)
            {
               this.trackAdjustEvent("te6lp2","l1d1ya");
            }
            this.totalBossKills = this.totalBossKills + 1;
         }
         if(param1.id == 86)
         {
            if(!this.treasureChestsKilled)
            {
               this.treasureChestsKilled = 1;
            }
            else
            {
               this.treasureChestsKilled = this.treasureChestsKilled + 1;
            }
         }
         this.totalKills = this.totalKills + 1;
         if(param2)
         {
            this.checkAchievements();
         }
         Zone.rareSpawnRandom.randFloat();
      }
      
      public function giveGoldPerSecond(param1:Number) : void
      {
         this.addGold(new BigDecimal(param1 * this.attributes.goldPerSecond));
         this.checkAchievements();
      }
      
      public function addGold(param1:BigDecimal) : BigDecimal
      {
         this.goldModified = true;
         if(isNaN(param1.numberValue()))
         {
            trace("was nan " + param1.numberRepresentation);
            var param1:BigDecimal = new BigDecimal(0);
         }
         this.gold = this.gold.add(param1);
         if(param1.gtN(0))
         {
            this.totalGold = this.totalGold.add(param1);
            this.totalGoldThisGame = this.totalGoldThisGame.add(param1);
            if(this.highestGold.lt(this.gold))
            {
               this.highestGold = this.gold;
            }
         }
         return this.gold;
      }
      
      public function addSouls(param1:Number) : Number
      {
         if(this.heroSouls + param1 < 0)
         {
            throw new Error("Not enough Hero Souls");
         }
         this.heroSouls = this.heroSouls + param1;
         this.totalHeroSouls = this.totalHeroSouls + param1;
         return this.heroSouls;
      }
      
      public function addSalvagePoints(param1:Number) : Number
      {
         if(isNaN(param1))
         {
            var param1:Number = 0;
         }
         this.items.salvagePoints = this.items.salvagePoints + param1;
         return this.items.salvagePoints;
      }
      
      public function addRubies(param1:Number, param2:String, param3:Number) : Number
      {
         if(isNaN(param1))
         {
            var param1:Number = 0;
         }
         this.rubies = this.rubies + param1;
         if(param1 >= 0)
         {
            dispatchEvent(new GenericEvent(EVT_RUBY_ADD,{"amount":param1}));
            this.historicRubies = this.historicRubies + param1;
            this.activityCount = this.activityCount + param1 * 3;
         }
         return this.rubies;
      }
      
      public function completeZone(param1:Zone) : void
      {
         this.zoneManager.curZone.complete();
         if(param1.height > this.highestFinishedZone)
         {
            this.highestFinishedZone = param1.height;
            this.checkAchievements();
            if(param1.height > this.highestFinishedZonePersist)
            {
               this.highestFinishedZonePersist = param1.height;
               if(this.highestFinishedZonePersist == 1)
               {
                  this.trackEvent("step_020_finished_first_zone");
               }
               KongAPIWrapper.instance.submitStat("Highest Zone",param1.height);
               GameAnalyticsManager.instance.newHighestZone(param1.height);
            }
         }
         this.zoneManager.populate();
      }
      
      public function getMultiplierForHeroLevel(param1:Hero, param2:Number = 1) : BigDecimal
      {
         var _loc5_:* = undefined;
         var _loc6_:Array = null;
         var _loc7_:* = NaN;
         var _loc3_:BigDecimal = new BigDecimal(1);
         var _loc4_:Number = 1;
         while(_loc4_ <= param2)
         {
            _loc5_ = param1.level - param2 + _loc4_;
            if(_loc5_ >= 200 && _loc5_ % 25 == 0 && heroLateGameUpgrades.hasOwnProperty(param1.id.toString()))
            {
               _loc6_ = heroLateGameUpgrades[param1.id.toString()];
               _loc7_ = (_loc5_ - 200) / 25;
               if(_loc6_.length > _loc7_)
               {
                  _loc3_ = _loc3_.multiply(new BigDecimal(_loc6_[_loc7_]));
               }
               else if(_loc5_ % 1000 == 0 && _loc5_ <= 8000)
               {
                  _loc3_ = _loc3_.multiply(new BigDecimal(10));
               }
               else
               {
                  _loc3_ = _loc3_.multiply(new BigDecimal(4));
               }
            }
            _loc4_++;
         }
         return _loc3_;
      }
      
      public function levelHero(param1:Hero, param2:Boolean = false, param3:int = 1) : void
      {
         if(param1.id == 1 && this.numWorldResets == 0)
         {
            if(param1.level == 1)
            {
               this.trackEvent("step_040_buy_cid");
               this.trackAdjustEvent("huzvr6","r2v0p5");
            }
            else if(param1.level == 2 || param1.level == 1 && param3 > 1)
            {
               this.trackEvent("step_050_level_cid");
            }
         }
         var _loc4_:BigDecimal = new BigDecimal(-1);
         this.addGold(param1.getCostUpToLevel(param1.level + param3).multiply(_loc4_));
         param1.addLevel(param3);
         this.totalHeroLevels = this.totalHeroLevels + param3;
         param1.damageMultiplier = param1.damageMultiplier.multiply(this.getMultiplierForHeroLevel(param1,param3));
         if(!param2)
         {
            this.attributes.recalculate();
            this.checkAchievements();
         }
      }
      
      public function hasUpgrade(param1:int) : Boolean
      {
         return this.upgrades[param1];
      }
      
      public function isEligibleUpgrade(param1:int) : Boolean
      {
         var _loc4_:* = false;
         var _loc5_:* = false;
         var _loc2_:Upgrade = new Upgrade();
         _loc2_.id = param1;
         var _loc3_:Boolean = this.hasUpgrade(param1);
         if(_loc3_)
         {
            return false;
         }
         _loc4_ = this.hasUpgrade(_loc2_.upgradeRequired) || _loc2_.upgradeRequired <= 0;
         _loc5_ = this.heroCollection.hasHeroWithLevel(_loc2_.heroId,_loc2_.heroLevelRequired);
         return _loc4_ && _loc5_;
      }
      
      public function canAffordUpgrade(param1:Upgrade) : Boolean
      {
         return this.gold.gteN(param1.cost);
      }
      
      public function canSeeUpgrade(param1:Upgrade) : Boolean
      {
         if(param1.heroId && param1.heroLevelRequired && !this.heroCollection.hasHeroWithLevel(param1.heroId,param1.heroLevelRequired))
         {
            return false;
         }
         return true;
      }
      
      public function canDoUpgrade(param1:Upgrade) : Boolean
      {
         if(this.canAffordUpgrade(param1) && this.canSeeUpgrade(param1) && !this.hasUpgrade(param1.id))
         {
            return true;
         }
         return false;
      }
      
      public function purchaseUpgrade(param1:Upgrade) : void
      {
         this.addGold(new BigDecimal(-param1.cost));
         this.upgrades[param1.id] = true;
         this._attributes.recalculate();
         this.totalUpgrades = this.totalUpgrades + 1;
         this.checkAchievements();
         this.needsActionBarUpdate = true;
      }
      
      public function purchaseUpgradeById(param1:int) : void
      {
         var _loc2_:Upgrade = new Upgrade();
         _loc2_.id = param1;
         this.purchaseUpgrade(_loc2_);
      }
      
      public function getAscensionUpgrade() : Upgrade
      {
         var _loc1_:Array = StaticDataWrapper.instance.getUpgradesByHeroId(20);
         var _loc2_:* = 0;
         while(_loc2_ < _loc1_.length)
         {
            if(_loc1_[_loc2_].id == Upgrade.ASCENSION_ID)
            {
               return _loc1_[_loc2_];
            }
            _loc2_++;
         }
         return new Upgrade();
      }
      
      public function checkAchievements() : void
      {
         var _loc2_:Achievement = null;
         var _loc1_:Object = {};
         this.getStaticAchievements();
         for each(_loc2_ in this._staticAchievements)
         {
            if(!this.achievements.hasOwnProperty(_loc2_.id))
            {
               if(this[_loc2_.checkFunction] >= Number(_loc2_.checkParams))
               {
                  this.achievements[_loc2_.id] = true;
                  _loc1_[_loc2_.id] = _loc2_;
               }
            }
         }
         if(MiscUtils.lengthOfObject(_loc1_))
         {
            this.onGotAchievements(_loc1_);
         }
         this._hasUncollectedAchievement = false;
         for each(_loc2_ in this._staticAchievements)
         {
            if(this.isAchievementRewardAvailable(_loc2_.id))
            {
               this._hasUncollectedAchievement = true;
               break;
            }
         }
      }
      
      public function isAchievementRewardAvailable(param1:int) : Boolean
      {
         if(!this.collectedAchievements)
         {
            this.collectedAchievements = {};
         }
         return this.collectedAchievements.hasOwnProperty(param1) && this.collectedAchievements[param1] == false;
      }
      
      public function collectAchievementReward(param1:*) : Number
      {
         if(!this.collectedAchievements)
         {
            this.collectedAchievements = {};
         }
         if(!this.isAchievementRewardAvailable(param1))
         {
            return 0;
         }
         var _loc2_:Achievement = new Achievement();
         _loc2_.id = param1;
         this.collectedAchievements[param1] = true;
         this.addRubies(_loc2_.premiumCurrency,"achievement",param1);
         return _loc2_.premiumCurrency;
      }
      
      public function getAchievements() : Object
      {
         var _loc2_:* = undefined;
         var _loc3_:Achievement = null;
         var _loc1_:Object = {};
         for(_loc2_ in this.achievements)
         {
            _loc3_ = new Achievement();
            _loc3_.id = Number(_loc2_);
            _loc1_[_loc2_] = _loc3_;
         }
         return _loc1_;
      }
      
      public function getTotalAchievementDpsPercent() : String
      {
         var _loc3_:Achievement = null;
         var _loc1_:Number = 100;
         var _loc2_:Object = {};
         this.getStaticAchievements();
         for each(_loc3_ in this._staticAchievements)
         {
            if(_loc3_.rewardFunction == "addDps" && this.hasAchievement(_loc3_.id))
            {
               _loc1_ = _loc1_ * (1 + int(_loc3_.rewardParams) / 100);
            }
         }
         _loc1_ = _loc1_ - 100;
         return String(_loc1_.toPrecision(4));
      }
      
      public function hasAchievement(param1:Number) : Boolean
      {
         return this.achievements.hasOwnProperty(param1);
      }
      
      public function onGotAchievements(param1:*) : void
      {
         var _loc2_:Achievement = null;
         for each(_loc2_ in param1)
         {
            trace("Got achievement \'" + _loc2_.id + "\', \'" + _loc2_.getProcessedName() + "\'");
            if(_loc2_.rewardFunction)
            {
               this[_loc2_.rewardFunction](_loc2_.rewardParams);
            }
            if(!this.isWeb)
            {
               if(!this.collectedAchievements)
               {
                  this.collectedAchievements = {};
               }
               this.collectedAchievements[_loc2_.id] = false;
            }
            dispatchEvent(new GenericEvent(GOT_ACHIEVEMENT,{"achievement":_loc2_}));
         }
      }
      
      public function addDps(param1:String) : *
      {
         var _loc2_:Number = Number(param1);
         this.allDpsMultiplier = this.allDpsMultiplier * (1 + _loc2_ / 100);
         this._attributes.recalculate();
      }
      
      public function addClickDamage(param1:String) : *
      {
         this.baseClickDamage = this.baseClickDamage + Number(param1);
         this._attributes.recalculate();
      }
      
      public function isIdle() : Boolean
      {
         return ServerTimeKeeper.instance.timestamp > this.lastClickTime + 60 * 1000;
      }
      
      public function isIdleClickIgnore() : Boolean
      {
         if(ServerTimeKeeper.instance.timestamp - this.lastClickTimeIgnoreIdle >= 5 * 60 * 1000 && (this.ancients.idleDpsPercent > 0 || this.ancients.idleGoldPercent > 0))
         {
            return true;
         }
         return false;
      }
      
      public function click(param1:Boolean) : void
      {
         var _loc5_:* = undefined;
         var _loc2_:Number = ServerTimeKeeper.instance.timestamp;
         if(!this.isIdleClickIgnore())
         {
            this.lastClickTime = _loc2_;
         }
         this.lastClickTimeIgnoreIdle = _loc2_;
         var _loc3_:Array = [];
         var _loc4_:Array = [];
         for(_loc5_ in this.clicksInLastSecond)
         {
            if(this.clicksInLastSecond[_loc5_] > _loc2_ - 1000)
            {
               _loc3_.push(this.clicksInLastSecond[_loc5_]);
            }
         }
         this.clicksInLastSecond = _loc3_;
         this.clicksInLastSecond.push(_loc2_);
         if(this.clicksInLastSecond.length > this.mostClicksPerSecond)
         {
            this.mostClicksPerSecond = this.clicksInLastSecond.length;
            this.checkAchievements();
         }
         this.totalClicks = this.totalClicks + 1;
         if(param1)
         {
            for(_loc5_ in this.critsInLastSecond)
            {
               if(this.critsInLastSecond[_loc5_] > _loc2_ - 1000)
               {
                  _loc4_.push(this.critsInLastSecond[_loc5_]);
               }
            }
            this.critsInLastSecond = _loc4_;
            this.critsInLastSecond.push(_loc2_);
            if(this.critsInLastSecond.length > this.mostCritsPerSecond)
            {
               this.mostCritsPerSecond = this.critsInLastSecond.length;
               this.checkAchievements();
            }
            this.totalCrits = this.totalCrits + 1;
         }
      }
      
      public function upgradeClickPercent(param1:String) : *
      {
         var _loc2_:Number = Number(param1);
         this.clickMultiplier = this.clickMultiplier * (1 + _loc2_ / 100);
      }
      
      public function upgradeHeroPercent(param1:String) : *
      {
         var _loc2_:Number = Number(param1.split(",")[0]);
         var _loc3_:Number = Number(param1.split(",")[1]);
         var _loc4_:Hero = this.heroCollection.getById(_loc2_);
         _loc4_.damageMultiplier = _loc4_.damageMultiplier.multiply(new BigDecimal(1 + _loc3_ / 100));
      }
      
      public function upgradeEveryonePercent(param1:String) : *
      {
         var _loc2_:Number = Number(param1);
         this.allDpsMultiplier = this.allDpsMultiplier * (1 + _loc2_ / 100);
      }
      
      public function upgradeGoldFoundPercent(param1:String) : *
      {
         var _loc2_:Number = Number(param1);
         this.goldMultiplier = this.goldMultiplier * (1 + _loc2_ / 100);
      }
      
      public function finalUpgrade(param1:String) : void
      {
         SaveManager.reset(true);
      }
      
      public function finalUpgrade2(param1:String) : void
      {
         SaveManager.reset(true,true);
      }
      
      public function upgradeAbaddon(param1:String) : void
      {
         this.abaddonMultiplier = Number(param1);
      }
      
      public function hasHeroWithLevel(param1:Number, param2:Number) : Boolean
      {
         var _loc3_:Hero = null;
         for each(_loc3_ in this.heroCollection.heroes)
         {
            if(_loc3_.id == param1)
            {
               if(_loc3_.level >= param2)
               {
                  return true;
               }
            }
         }
         return false;
      }
      
      public function upgradeClickDpsPercent(param1:String) : *
      {
         var _loc2_:Number = Number(param1);
         this.clickDpsPercent = this.clickDpsPercent + _loc2_;
      }
      
      public function catchCoin(param1:Number) : void
      {
      }
      
      public function dropCoin(param1:Number) : void
      {
      }
      
      public function updateHeroCollection(param1:Object) : void
      {
         var _loc2_:Hero = null;
         for each(_loc2_ in param1)
         {
            if(this.heroCollection.hasById(_loc2_.id) == false)
            {
               this.heroCollection.addById(_loc2_.id);
            }
         }
      }
      
      public function getClickDamage() : BigDecimal
      {
         var _loc1_:Array = ["getClickDamage",this.attributes.currentClickDamage,this.clickDpsPercent,this.attributes.currentAttack,this.getSkillBonus("skillClickMultiplier"),this.ancients.clickDamagePercent,this.comboer.isClickComboing(),this.comboer.getDpsBonus()];
         var _loc2_:BigDecimal = this.attributes.currentClickDamage.ceil();
         _loc2_ = _loc2_.add(this.attributes.currentAttack.multiply(new BigDecimal(this.clickDpsPercent / 100)));
         _loc2_ = _loc2_.multiply(new BigDecimal(this.getSkillBonus("skillClickMultiplier") + 1));
         _loc2_ = _loc2_.multiply(new BigDecimal(this.ancients.clickDamagePercent * 0.01 + 1));
         if(this.comboer.isClickComboing())
         {
            _loc2_ = _loc2_.multiply(new BigDecimal(this.comboer.getDpsBonus() + 1));
         }
         var _loc3_:BigDecimal = _loc2_;
         return _loc3_;
      }
      
      public function getSkillCooldownDuration(param1:*) : Number
      {
         return ActionBar.skills[param1]["cooldown"] * (1 - this.ancients.skillCooldownPercent * 0.01);
      }
      
      public function getSkillCooldown(param1:Number, param2:Number) : Number
      {
         var _loc3_:Number = this.getSkillCooldownDuration(param1);
         var _loc4_:Number = this.skillCooldowns[param1];
         return Math.max(0,_loc4_ + _loc3_ - ServerTimeKeeper.instance.timestamp);
      }
      
      public function numSkillsOnCooldown(param1:Boolean = false) : Number
      {
         var _loc2_:Number = 0;
         var _loc3_:Number = ServerTimeKeeper.instance.timestamp;
         var _loc4_:* = 1;
         while(_loc4_ <= ActionBar.NUM_ACTION_BUTTONS)
         {
            if(this.getSkillCooldown(_loc4_,_loc3_) > 0)
            {
               if(!(param1 && _loc4_ == ActionBar.DARK_RITUAL))
               {
                  _loc2_++;
               }
            }
            _loc4_++;
         }
         return _loc2_;
      }
      
      public function getDelayWhenCooldownsFinish() : Number
      {
         var _loc2_:String = null;
         var _loc3_:* = NaN;
         if(this.isSkillLocked(4) || this.isSkillLocked(5) || this.isSkillLocked(6) || this.isSkillLocked(7) || this.isSkillLocked(8) || this.isSkillLocked(9))
         {
            return 0;
         }
         var _loc1_:Number = 0;
         for(_loc2_ in ActionBar.skills)
         {
            _loc3_ = this.getSkillCooldown(Number(_loc2_),ServerTimeKeeper.instance.timestamp);
            if(_loc3_ > _loc1_ && _loc3_ < 3600000)
            {
               _loc1_ = _loc3_;
            }
         }
         return _loc1_;
      }
      
      public function isSkillLocked(param1:Number) : Boolean
      {
         return !this.skillCooldowns.hasOwnProperty(param1);
      }
      
      public function unlockSkill(param1:Number) : void
      {
         this.skillCooldowns[param1] = 0;
         if(!this.persistentVars.didPurchaseSkill)
         {
            this.persistentVars.didPurchaseSkill = true;
            this.trackEvent("step_060_purchased_skill");
         }
         this.needsActionBarUpdate = true;
      }
      
      public function startSkillCooldown(param1:*, param2:Number) : void
      {
         if(!this.usedSkills)
         {
            this.usedSkills = {};
         }
         this.usedSkills[param1] = true;
         this.lastClickTime = ServerTimeKeeper.instance.timestamp;
         this.lastClickTimeIgnoreIdle = ServerTimeKeeper.instance.timestamp;
         this.skillCooldowns[param1] = param2;
         this.needsActionBarUpdate = true;
         this.numSkillsPressedRecently = 0;
         for each(var param2 in this.skillCooldowns)
         {
            if(param2 > ServerTimeKeeper.instance.timestamp - 2000)
            {
               this.numSkillsPressedRecently++;
            }
         }
         if(this.numSkillsPressedRecently >= 5)
         {
            trace("PLAY THE SOUND HERE");
         }
      }
      
      public function getSkillBonus(param1:String) : *
      {
         if(ServerTimeKeeper.instance.timestamp <= this[param1 + "End"])
         {
            return this[param1];
         }
         return 0;
      }
      
      public function getHeroSoulBonusText() : String
      {
         var _loc1_:* = "";
         _loc1_ = _("+%s% Damage (+10% each)",this.getHeroSoulWorldDamageBonus());
         if(this.ancients.dpsPercent > 0)
         {
            _loc1_ = _loc1_ + _("\n+%s% Damage from Morgulis",this.ancients.dpsPercent);
         }
         return _loc1_;
      }
      
      public function getHeroSoulTooltipText() : String
      {
         return _("You have %s Hero Souls.\n\nBonus: %s" + "\n\nYou will receive 1 Hero Soul for every 2000 hero levels through a World Ascension (an upgrade provided by the hero Amenhotep). You can add to this number by defeating centurion bosses (every 100 zones), or by finding the rare Primal Bosses after zone 100.",this.heroSouls,this.getHeroSoulBonusText());
      }
      
      public function perSecondTick(param1:* = null) : void
      {
         var _loc2_:Number = ServerTimeKeeper.instance.timestamp;
         this.currentSecond = (this.currentSecond + 1) % 60;
         this.goldEachSecond[this.currentSecond] = this.totalGoldThisGame;
      }
      
      public function getGoldInLastMinute() : Number
      {
         var _loc1_:Number = this.goldEachSecond[this.currentSecond] - this.goldEachSecond[(this.currentSecond + 1) % 60];
         if(isNaN(_loc1_))
         {
            _loc1_ = 0;
         }
         return _loc1_;
      }
      
      public function shouldShowHeroSouls() : Boolean
      {
         return this.heroSouls > 0 || this.heroCollection.hasHeroWithLevel(20,1) || this.getAscensionHeroSouls() > 0;
      }
      
      public function shouldShowItems() : Boolean
      {
         return this.numWorldResets >= 2 || this.numWorldResets == 1 && this.items.getBonusItemZone() == -1 || this.items.length > 0;
      }
      
      public function getPrimalChance() : Number
      {
         return 25 + this.ancients.primalBossSpawnPercent;
      }
      
      public function isPrimalLevel(param1:Number) : Boolean
      {
         var _loc2_:Random = null;
         var _loc3_:* = NaN;
         var _loc4_:* = 0;
         if(param1 >= 100)
         {
            if(this.finishedPrimals && this.finishedPrimals.hasOwnProperty(param1))
            {
               return false;
            }
            if(param1 % 100 == 0)
            {
               return true;
            }
            _loc2_ = new Random();
            _loc2_.fromJsonObject(this.primalNumberGenerator.toJsonObject());
            if(param1 % 5 == 0)
            {
               _loc3_ = (param1 - 100) / 5;
               _loc4_ = 0;
               while(_loc4_ < _loc3_)
               {
                  _loc2_.rand();
                  _loc4_++;
               }
               if(_loc2_.rand() % 100 < this.getPrimalChance())
               {
                  return true;
               }
            }
         }
         return false;
      }
      
      public function getPrimalHeroSoulRewards(param1:Number) : Number
      {
         if(param1 == 100)
         {
            return 1;
         }
         if(param1 > 100 && param1 % 5 == 0)
         {
            return Math.floor(Math.pow(((param1 - 100) / 5 + 4) / 5,1.3) * (1 + this.ancients.primalHeroSoulPercent * 0.01));
         }
         return 0;
      }
      
      public function doGetPrimalRewards(param1:Number) : void
      {
         this.finishedPrimals[param1] = true;
         var _loc2_:Number = this.getPrimalHeroSoulRewards(param1);
         this.primalSouls = this.primalSouls + _loc2_;
         this.titanDamage = this.titanDamage + _loc2_;
         this.totalPrimalsKilled = this.totalPrimalsKilled + 1;
      }
      
      override public function versionData() : void
      {
         var merc:* = undefined;
         var questNumber:int = 0;
         var itemInd:Number = NaN;
         var relics:Array = null;
         var sum:int = 0;
         var index:* = undefined;
         var ancient:Ancient = null;
         var oldBonus:Number = NaN;
         var levelsToAdd:* = undefined;
         var item:Item = null;
         var bonus:int = 0;
         var minIndex:* = undefined;
         var deathDay:Boolean = false;
         var treebeast:Hero = null;
         var key:* = undefined;
         var upgrades:Object = null;
         var i:* = undefined;
         var hero:Hero = null;
         if(this.totalHeroSoulsFromAscensions <= this.titanDamage)
         {
            this.totalHeroSoulsFromAscensions = this.titanDamage;
         }
         if(!this.epicRoller)
         {
            this.epicRoller = new Random();
            this.epicRoller.srand(ServerTimeKeeper.instance.timestamp % Random.RAND_MAX);
         }
         this.upgrades[Upgrade.ASCENSION_ID] = false;
         this.upgrades[Upgrade.ASCENSION2_ID] = false;
         if(!this.mercenaries.mercRoller)
         {
            this.mercenaries.mercRoller = new Random();
            this.mercenaries.mercRoller.srand((this.epicRoller.seed + 111111) % Random.RAND_MAX);
         }
         if(!this.mercenaries.questRoller)
         {
            this.mercenaries.questRoller = new Random();
            this.mercenaries.questRoller.srand((ServerTimeKeeper.instance.timestamp + 222222) % Random.RAND_MAX);
         }
         if(this.mercenaries.questOptions.hasOwnProperty(0))
         {
            questNumber = 0;
            while(questNumber < 3)
            {
               if(this.mercenaries.questOptions[questNumber]["rewardQty"].hasOwnProperty("mant"))
               {
                  this.mercenaries.questOptions[questNumber]["rewardQty"] = 1;
               }
               questNumber++;
            }
         }
         if(this.items)
         {
            itemInd = 0;
            while(itemInd <= Items.MAX_SLOTS)
            {
               if(this.items.getItemInSlot(itemInd) && !this.items.getItemInSlot(itemInd).bonus1Distribution)
               {
                  this.items.getItemInSlot(itemInd).migrateItem();
               }
               itemInd++;
            }
         }
         if(this.latestBuildLoaded < 26)
         {
            if(this.items && this.ancients && this.ancients.getAncientById(3))
            {
               relics = [];
               itemInd = 0;
               while(itemInd <= Items.MAX_SLOTS)
               {
                  item = this.items.getItemInSlot(itemInd);
                  if(item)
                  {
                     bonus = item.getAncientLevelsForBonusType(25);
                     if(bonus > 0)
                     {
                        if(relics.length < 4)
                        {
                           relics.push(bonus);
                        }
                        else
                        {
                           minIndex = -1;
                           for(index in relics)
                           {
                              if(minIndex == -1 || relics[index] < relics[minIndex])
                              {
                                 minIndex = index;
                              }
                           }
                           if(minIndex != -1)
                           {
                              relics[minIndex] = bonus;
                           }
                        }
                     }
                  }
                  itemInd++;
               }
               sum = 0;
               for(index in relics)
               {
                  sum = sum + relics[index];
               }
               ancient = this.ancients.getAncientById(3);
               oldBonus = ancient[ancient.levelAmountFormula](ancient.level) + 5 * sum;
               levelsToAdd = 0;
               while(oldBonus - ancient[ancient.levelAmountFormula](ancient.level + sum + levelsToAdd) > 0)
               {
                  levelsToAdd++;
               }
               ancient.level = ancient.level + levelsToAdd;
            }
         }
         this.mercenaryCount = 0;
         for(merc in this.mercenaries.mercenaries)
         {
            this.mercenaryCount++;
            if(this.mercenaries.mercenaries[merc].rarity > this.rarestMercenaryEver)
            {
               this.rarestMercenaryEver = this.mercenaries.mercenaries[merc].rarity;
            }
            if(this.mercenaries.mercenaries[merc].lastQuestGoldRewardQty > 100000)
            {
               this.mercenaries.mercenaries[merc].lastQuestGoldRewardQty = 1;
            }
            if(this.mercenaries.mercenaries[merc].rarity < 3 && this.mercenaries.mercenaries[merc].statId == 5)
            {
               this.mercenaries.mercenaries[merc].statId = 3;
            }
            if(this.mercenaries.mercenaries[merc].experience < 0)
            {
               this.mercenaries.mercenaries[merc].experience = 0;
            }
            if(this.mercenaries.mercenaries[merc].roller == null)
            {
               this.mercenaries.mercenaries[merc].roller = new Random();
               this.mercenaries.mercenaries[merc].roller.srand((this.mercenaries.mercRoller.rand() + 1) % Random.RAND_MAX);
            }
            if(this.mercenaries.mercenaries[merc].timeToDie == null || isNaN(this.mercenaries.mercenaries[merc].timeToDie) || this.mercenaries.mercenaries[merc].timeToDie <= 0)
            {
               this.mercenaries.mercenaries[merc].timeToDie = 0;
               deathDay = this.mercenaries.mercRoller.randFloat() > 4 / 5;
               while(!deathDay)
               {
                  this.mercenaries.mercenaries[merc].timeToDie = this.mercenaries.mercenaries[merc].timeToDie + 86400;
                  deathDay = this.mercenaries.mercRoller.randFloat() > 4 / 5;
               }
               this.mercenaries.mercenaries[merc].timeToDie = this.mercenaries.mercenaries[merc].timeToDie + this.mercenaries.mercRoller.range(1,86400);
               this.mercenaries.mercenaries[merc].timeToDie = this.mercenaries.mercenaries[merc].timeToDie + this.mercenaries.mercenaries[merc].lastQuestDuration;
               this.mercenaries.mercenaries[merc].questResult = 0;
            }
         }
         if(!this.titanDamage)
         {
            this.titanDamage = 1;
         }
         if(!this.ticketsUsed)
         {
            this.ticketsUsed = "";
         }
         if(!this.actionBar)
         {
            this.actionBar = new ActionBar();
         }
         if(!this.items)
         {
            this.items = new Items();
         }
         if(this.items.equipmentSlots != 4)
         {
            this.items.equipmentSlots = 4;
         }
         if(!this.items.ascensionItemsRoller)
         {
            this.items.ascensionItemsRoller = new Random();
            this.items.ascensionItemsRoller.srand(ServerTimeKeeper.instance.timestamp % Random.RAND_MAX);
         }
         if(!this.items.guildItemsRoller)
         {
            this.items.guildItemsRoller = new Random();
            this.items.guildItemsRoller.srand(ServerTimeKeeper.instance.timestamp % Random.RAND_MAX);
         }
         if(!this.items.bonusZoneRoller)
         {
            this.items.bonusZoneRoller = new Random();
            this.items.bonusZoneRoller.srand(ServerTimeKeeper.instance.timestamp % Random.RAND_MAX);
         }
         if(this.gold == null)
         {
            this.gold = new BigDecimal(0);
         }
         if(this.gold.lt(new BigDecimal(0)))
         {
            this.gold = new BigDecimal(0);
         }
         if(!this.version)
         {
            this.version = 7;
         }
         switch(this.version)
         {
            case 2:
               if(!this.primalNumberGenerator)
               {
                  this.primalNumberGenerator = new Random();
                  this.primalNumberGenerator.srand(ServerTimeKeeper.instance.timestamp % Random.RAND_MAX);
               }
            case 3:
               for(key in this.skillCooldowns)
               {
                  this.skillCooldowns[key] = 0;
               }
               this.skillClickMultiplierEnd = 0;
               this.skillCriticalClickChanceEnd = 0;
               this.skillDpsMultiplierEnd = 0;
               this.skillFreeClicksEnd = 0;
               this.skillGoldBonusEnd = 0;
               this.skillWildGoldEnd = 0;
            case 4:
               for(key in this.skillCooldowns)
               {
                  this.skillCooldowns[key] = 0;
               }
               this.skillClickMultiplierEnd = 0;
               this.skillCriticalClickChanceEnd = 0;
               this.skillDpsMultiplierEnd = 0;
               this.skillFreeClicksEnd = 0;
               this.skillGoldBonusEnd = 0;
               this.skillWildGoldEnd = 0;
            case 5:
               treebeast = this.heroCollection.getById(2);
               if(treebeast.damageMultiplier.lteN(20))
               {
                  upgrades = UserData.heroLateGameUpgrades;
                  for(i in upgrades)
                  {
                     try
                     {
                        hero = this.heroCollection.getById(i);
                     }
                     catch(e:Error)
                     {
                        continue;
                     }
                     for(key in upgrades[i])
                     {
                        if(hero.level >= Number(key) * 25 + 200)
                        {
                           hero.damageMultiplier = hero.damageMultiplier.multiply(new BigDecimal(upgrades[i][key]));
                           trace(hero.name + " " + upgrades[i][key]);
                        }
                     }
                  }
               }
            case 6:
            case 7:
               trace("do nothing yet");
            default:
               trace("do nothing yet");
         }
         if(this.version < 7)
         {
            this.version = 7;
         }
         this.shiftEnabled = false;
         this.ctrlEnabled = false;
         this.zKeyEnabled = false;
         this.qKeyEnabled = false;
         trace("Migrated from " + this.latestBuildLoaded + " to " + HeroClickerMain.BUILD);
         if(HeroClickerMain.TEST_BUILD)
         {
            this.isTestUser = true;
         }
         this.latestBuildLoaded = HeroClickerMain.BUILD;
      }
      
      public function hasNewSkill() : Boolean
      {
         if(!this.usedSkills)
         {
            this.usedSkills = {};
         }
         var _loc1_:Number = 1;
         while(_loc1_ <= ActionBar.NUM_ACTION_BUTTONS)
         {
            if(this.isNewSkill(_loc1_))
            {
               return true;
            }
            _loc1_++;
         }
         return false;
      }
      
      public function isNewSkill(param1:*) : Boolean
      {
         if(!this.usedSkills)
         {
            this.usedSkills = {};
         }
         if(!this.skillCooldowns.hasOwnProperty(param1))
         {
            return false;
         }
         if(this.usedSkills.hasOwnProperty(param1))
         {
            return false;
         }
         return true;
      }
      
      public function hasAnySkills() : Boolean
      {
         if(MiscUtils.lengthOfObject(this.skillCooldowns) > 0)
         {
            return true;
         }
         return false;
      }
      
      public function upgradeGetSkill(param1:String) : void
      {
         this.unlockSkill(Number(param1));
      }
      
      public function upgradeCriticalChance(param1:String) : void
      {
         var _loc2_:Number = Number(param1);
         this.baseCriticalClickChance = this.baseCriticalClickChance + _loc2_;
      }
      
      public function upgradeCriticalDamage(param1:String) : void
      {
         var _loc2_:Number = Number(param1);
         this.criticalMultiplier = this.criticalMultiplier + _loc2_;
      }
      
      public function getHeroSoulWorldDamageBonus() : Number
      {
         return this.heroSouls * 10 + this.ancients.dpsPercent;
      }
      
      public function getAscendHeroSoulWorldDamageBonus() : Number
      {
         return this.getAscensionHeroSouls() * 10 + this.ancients.dpsPercent;
      }
      
      public function getHeroSoulCooldownBonus() : Number
      {
         return Math.min(this.heroSouls,75);
      }
      
      public function getHeroSoulGoldBonus() : Number
      {
         return Math.min(this.heroSouls * 2,50);
      }
      
      private function getDefaultMonster() : Monster
      {
         var _loc1_:Monster = new Monster();
         _loc1_.id = 1;
         _loc1_.level = this.highestFinishedZone + 1;
         return _loc1_;
      }
      
      public function getNumberOfEnemiesKilledInTime(param1:Monster, param2:Number = 8) : Number
      {
         var _loc8_:BigDecimal = null;
         var _loc3_:BigDecimal = this.attributes.currentAttackUnmodified;
         if(_loc3_.ltN(1) || isNaN(_loc3_.numberValue()))
         {
            _loc3_ = new BigDecimal(1);
         }
         _loc3_ = _loc3_.multiply(new BigDecimal(this.ancients.idleDpsPercent * 0.01 + 1));
         var _loc4_:BigDecimal = new BigDecimal(60 * 60 * param2);
         var _loc5_:Number = 0.5;
         var _loc6_:BigDecimal = Formulas.instance.monsterLifeFormula1(param1);
         var _loc7_:BigDecimal = _loc6_.divide(_loc3_).add(new BigDecimal(_loc5_));
         _loc8_ = _loc4_;
         _loc8_ = _loc8_.divide(_loc7_);
         return _loc8_.numberValue();
      }
      
      public function getPurchaseGoldAmount(param1:Number = 8, param2:Boolean = false) : BigDecimal
      {
         var _loc3_:Monster = this.getDefaultMonster();
         var _loc4_:Number = this.getNumberOfEnemiesKilledInTime(_loc3_,param1);
         var _loc5_:BigDecimal = Formulas.instance.monsterGoldFormula1(_loc3_,true);
         var _loc6_:BigDecimal = new BigDecimal(_loc4_).multiply(_loc5_);
         var _loc7_:BigDecimal = new BigDecimal(1 + this.getTreasureChestChance() * (this.getTreasureChestMultiplier() - 1));
         _loc6_ = _loc6_.multiply(_loc7_);
         var _loc8_:BigDecimal = new BigDecimal(this.ancients.idleGoldPercent * 0.01 + 1);
         _loc6_ = _loc6_.multiply(_loc8_);
         var _loc9_:Number = this.ancients.tenXGoldChance;
         _loc6_ = _loc6_.multiply(new BigDecimal(1 + _loc9_ * 0.09));
         if(param2)
         {
            if(_loc6_.ltN(1000))
            {
               _loc6_ = new BigDecimal(1000);
            }
         }
         else if(_loc6_.ltN(0))
         {
            _loc6_ = new BigDecimal(0);
         }
         return _loc6_;
      }
      
      public function getUniqueId() : String
      {
         if(!this.uniqueId || this.uniqueId == "")
         {
            this.uniqueId = "";
            this.uniqueId = this.uniqueId + new Date().getTime().toString();
            this.uniqueId = this.uniqueId + Math.random().toString().replace(".","");
         }
         return this.uniqueId;
      }
      
      public function getPasswordHash() : String
      {
         if(!this.passwordHash || this.passwordHash == "")
         {
            this.passwordHash = "";
            this.passwordHash = RandomString.getString(16);
         }
         return this.passwordHash;
      }
      
      public function doTimeLapse(param1:Number = 8, param2:Boolean = true) : BigDecimal
      {
         var _loc5_:* = undefined;
         var _loc6_:* = NaN;
         var _loc7_:* = NaN;
         var _loc8_:BigDecimal = null;
         var _loc9_:BigDecimal = null;
         var _loc10_:BigDecimal = null;
         trace(this,"doTimeLapse",param1);
         var _loc3_:Monster = this.getDefaultMonster();
         this.totalKills = this.totalKills + this.getNumberOfEnemiesKilledInTime(_loc3_,param1);
         var _loc4_:BigDecimal = this.getPurchaseGoldAmount(param1);
         if(param2)
         {
            for(_loc5_ in this.skillCooldowns)
            {
               this.skillCooldowns[_loc5_] = Math.floor(this.skillCooldowns[_loc5_]) - 60 * 60 * param1 * 1000;
            }
            this.mercenaryTimelapse(param1);
         }
         if(param1 == 8)
         {
            this.timelapses = this.timelapses + 1;
         }
         else
         {
            if(!this.prevLoginTimestamp)
            {
               this.updatePrevLoginTime();
            }
            if(this.adBonusEndTime > this.prevLoginTimestamp)
            {
               _loc6_ = this.adBonusEndTime - this.prevLoginTimestamp;
               _loc7_ = param1 * 60 * 60 * 1000;
               if(_loc6_ > _loc7_)
               {
                  _loc6_ = _loc7_;
               }
               _loc8_ = new BigDecimal(_loc6_ / _loc7_);
               _loc9_ = _loc4_.multiply(_loc8_);
               _loc10_ = new BigDecimal(UserData.AD_BONUS_MULTIPLIER - 1);
               _loc4_ = _loc4_.add(_loc9_.multiply(_loc10_));
            }
         }
         if(_loc4_.gtN(0))
         {
            this.addGold(_loc4_);
         }
         return _loc4_;
      }
      
      private function mercenaryTimelapse(param1:Number) : void
      {
         var _loc2_:Mercenary = null;
         for each(_loc2_ in this.mercenaries.mercenaries)
         {
            if(_loc2_.lastQuestStartTime > 0)
            {
               _loc2_.lastQuestStartTime = _loc2_.lastQuestStartTime - param1 * 3600 * 1000;
            }
         }
         if(this.mercenaries.startRecruitTime > 0)
         {
            this.mercenaries.startRecruitTime = this.mercenaries.startRecruitTime - param1 * 3600 * 1000;
         }
      }
      
      public function refreshCooldowns(param1:Number = 8, param2:Boolean = false) : void
      {
         var _loc3_:* = undefined;
         for(_loc3_ in this.skillCooldowns)
         {
            if(!(param2 && _loc3_ == ActionBar.DARK_RITUAL))
            {
               this.skillCooldowns[_loc3_] = Math.floor(this.skillCooldowns[_loc3_]) - 60 * 60 * param1 * 1000;
            }
         }
      }
      
      public function getHighestZone() : Zone
      {
         return this._zoneManager.getZoneByHeight(this.highestFinishedZone + 1);
      }
      
      public function getDevGift(param1:int) : void
      {
         switch(param1)
         {
            case 1:
               this.addSouls(5);
               break;
            case 2:
               this.addSouls(30);
               break;
            case 3:
               this.freeRespecs = this.freeRespecs + 2;
               break;
            case 4:
               this.freeRespecs = this.freeRespecs + 1;
               break;
         }
         this.devGifts[param1] = param1;
      }
      
      public function hasDevGift(param1:int) : Boolean
      {
         return this.devGifts[param1] == null;
      }
      
      public function updatePrevLoginTime() : void
      {
         this.prevLoginTimestamp = ServerTimeKeeper.instance.timestamp;
      }
      
      private function onCheatDetected(param1:Event) : void
      {
         trace("Reseting values");
         this.gold = new BigDecimal(0);
         this.heroSouls = 0;
      }
      
      public function getHighestHeroSeen() : Number
      {
         var _loc4_:Hero = null;
         var _loc1_:Number = 0;
         var _loc2_:Number = 0;
         var _loc3_:Object = this.getStaticHeroes();
         for each(_loc4_ in _loc3_)
         {
            if(this.highestGold.ltN(_loc4_.baseCost))
            {
               return _loc4_.id;
            }
            _loc2_++;
         }
         if(_loc2_ == MiscUtils.lengthOfObject(_loc3_))
         {
            return MiscUtils.lengthOfObject(_loc3_);
         }
         return _loc1_;
      }
      
      public function getRandomGoldenHeroes(param1:int, param2:int = 0) : Array
      {
         var _loc7_:* = 0;
         if(this.epicHeroSeed == 0)
         {
            if(this.totalKills == 0)
            {
               this.epicHeroSeed = Rnd.integer(0,Random.RAND_MAX);
            }
            else
            {
               this.epicHeroSeed = this.totalKills;
            }
            trace("seed init to",this.epicHeroSeed);
         }
         var _loc3_:Array = [];
         var _loc4_:Random = new Random();
         _loc4_.seed = this.epicHeroSeed;
         var _loc5_:Number = this.getHighestHeroSeen();
         if(_loc5_ < 5)
         {
            _loc5_ = 5;
         }
         var _loc6_:* = 0;
         while(_loc6_ < param1)
         {
            _loc7_ = param2;
            while(_loc7_ == param2)
            {
               _loc7_ = _loc4_.integer(2,_loc5_);
            }
            _loc3_[_loc6_] = _loc7_;
            this.epicHeroSeed = _loc4_.seed;
            _loc6_++;
         }
         return _loc3_;
      }
      
      public function canCollectEpicHero() : Boolean
      {
         if(this.highestFinishedZonePersist >= 100 && (this.epicHeroReceivedUpTo < 100 || this.epicHeroReceivedUpTo + 10 <= this.highestFinishedZonePersist))
         {
            return true;
         }
         return false;
      }
      
      public function collectEpicHeroGift() : Array
      {
         var _loc1_:Array = this.getRandomGoldenHeroes(1);
         this.heroCollection.addEpicLevel(_loc1_[0]);
         if(this.epicHeroReceivedUpTo < 100)
         {
            this.epicHeroReceivedUpTo = 100;
         }
         else
         {
            this.epicHeroReceivedUpTo = this.epicHeroReceivedUpTo + 10;
         }
         this.attributes.recalculate();
         return _loc1_;
      }
      
      public function incrementPurchaseRecord(param1:String) : void
      {
         if(this.purchaseRecord[param1] == null)
         {
            this.purchaseRecord[param1] = 1;
         }
         else
         {
            this.purchaseRecord[param1]++;
         }
      }
      
      public function getTreasureChestChance() : Number
      {
         return CHANCE_OF_TREASURE_MONSTER * (1 + this.ancients.treasureChestSpawnPercent * 0.01);
      }
      
      public function getTreasureChestMultiplier() : Number
      {
         return UserData.TREASURE_MULTIPLIER * (1 + this.ancients.treasureChestGoldPercent * 0.01);
      }
      
      public function getBossHpMultiplier() : Number
      {
         return (1 - this.ancients.bossLifePercent * 0.01) * UserData.BOSS_HP_MULTIPLIER;
      }
      
      public function getTotalCriticalMultiplier() : Number
      {
         return this.criticalMultiplier * (1 + this.ancients.criticalClickMultiplierPercent * 0.01);
      }
      
      public function getBossZoneTime() : Number
      {
         return 30 + this.ancients.bossTimerSeconds;
      }
      
      public function getZoneMonsterRequirement() : Number
      {
         return 10 - this.ancients.monsterLevelRequirement;
      }
      
      public function getSkillDuration(param1:Number) : Number
      {
         switch(param1)
         {
            case 1:
               return 30 + this.ancients.clickstormSeconds;
            case 2:
               return 30 + this.ancients.powersurgeSeconds;
            case 3:
               return 30 + this.ancients.luckyStrikesSeconds;
            case 4:
               return 30 + this.ancients.metalDetectorSeconds;
            case 6:
               return 30 + this.ancients.goldenClicksSeconds;
            case 7:
               return 30 + this.ancients.superClicksSeconds;
            default:
               return 0;
         }
      }
      
      public function getSkillDescription(param1:*) : String
      {
         var _loc2_:* = "description";
         var _loc3_:String = _(ActionBar.skills[param1][_loc2_] as String);
         var _loc4_:Number = this.getSkillDuration(param1);
         _loc3_ = _loc3_.replace("%1",_loc4_);
         if(param1 == 6)
         {
            _loc3_ = _loc3_.replace("%2",(1 + this.ancients.goldenClicksPercent * 0.01 as Number).toPrecision(2));
         }
         return _loc3_;
      }
      
      private function objectDifference(param1:Object, param2:Object) : int
      {
         var _loc4_:* = undefined;
         var _loc3_:Number = 0;
         for(_loc4_ in param2)
         {
            if(!param1.hasOwnProperty(_loc4_))
            {
               _loc3_ = _loc3_ + 1;
            }
         }
         return _loc3_;
      }
      
      public function rerollAncients() : void
      {
         this.ancients.didGetVaagur = 1;
         var _loc1_:Object = this.ancients.getAncientsToChooseFrom();
         var _loc2_:Number = 0;
         while(_loc2_ < Math.min(4,this.ancients.numAncientsRemaining - 4))
         {
            this.ancients.getAncientsRoller().rand();
            this.ancients.getAncientsRoller().rand();
            this.ancients.getAncientsRoller().rand();
            this.ancients.getAncientsRoller().rand();
            _loc2_ = this.objectDifference(_loc1_,this.ancients.getAncientsToChooseFrom());
         }
         var _loc3_:Number = this.getRerollAncientsCost();
         if(!this.ancients.rerollSoulsSpent)
         {
            this.ancients.rerollSoulsSpent = 0;
         }
         this.ancients.rerollSoulsSpent = this.ancients.rerollSoulsSpent + _loc3_;
         this.addSouls(-_loc3_);
         this.ancients.numRerolls = this.ancients.numRerolls + 1;
      }
      
      public function getRerollAncientsCost() : Number
      {
         return Math.ceil(this.ancients.getPriceToPurchase() / 3);
      }
      
      public function respecAncients() : void
      {
         this.addSouls(this.getRespecHeroSouls());
         if(this.freeRespecs > 0)
         {
            this.freeRespecs = this.freeRespecs - 1;
         }
         this.ancients.getAncientsRoller().rand();
         this.ancients.getAncientsRoller().rand();
         this.ancients.getAncientsRoller().rand();
         this.ancients.ancients = {};
         this.ancients.numPurchased = 0;
         this.ancients.rerollSoulsSpent = 0;
      }
      
      public function getRespecHeroSouls() : Number
      {
         var _loc1_:Number = 0.75;
         if(this.freeRespecs > 0)
         {
            _loc1_ = 1;
         }
         var _loc2_:Number = this.getTotalHeroSoulsSpent();
         return Math.floor(_loc2_ * _loc1_);
      }
      
      public function getTotalHeroSoulsSpent() : Number
      {
         var _loc2_:Ancient = null;
         var _loc1_:Number = 0;
         for each(_loc2_ in this.ancients.ancients)
         {
            _loc1_ = _loc1_ + _loc2_.spentHeroSouls;
         }
         _loc1_ = _loc1_ + this.ancients.rerollSoulsSpent;
         return _loc1_;
      }
      
      public function getRespecText() : String
      {
         if(this.freeRespecs > 0)
         {
            return _("Use a free respec to destroy all your ancients, and get back 100% (%s Hero Souls) spent on them. Free respecs: %s.",this.getRespecHeroSouls(),this.freeRespecs);
         }
         return _("Destroy all your ancients, and get back 75% (%s Hero Souls) spent on them. Free respecs: %s.",this.getRespecHeroSouls(),this.freeRespecs);
      }
      
      public function quickAscend() : void
      {
         this.numWorldResets++;
         this.addSouls(this.getPurchaseAscensionHeroSouls());
      }
      
      public function clickOnAncientsTab() : void
      {
         this.didClickOnAncientsTab = true;
      }
      
      public function clickOnMercenaryTab() : void
      {
         this.didClickOnMercenaryTab = true;
      }
      
      public function clickOnShopTab() : void
      {
         this.didClickOnShopTab = true;
      }
      
      public function buyAllAvailableUpgrades() : void
      {
         var _loc3_:Upgrade = null;
         var _loc1_:* = false;
         var _loc2_:Object = StaticData.instance.getAll(Upgrade);
         for each(_loc3_ in _loc2_)
         {
            if(!this.hasUpgrade(_loc3_.id) && this.canSeeUpgrade(_loc3_) && this.canAffordUpgrade(_loc3_) && _loc3_.id != Upgrade.ASCENSION_ID && _loc3_.id != Upgrade.ASCENSION2_ID)
            {
               _loc1_ = true;
               this.addGold(new BigDecimal(-_loc3_.cost));
               this.upgrades[_loc3_.id] = true;
               this.totalUpgrades = this.totalUpgrades + 1;
               if(_loc3_.upgradeFunction in this)
               {
                  this[_loc3_.upgradeFunction](_loc3_.upgradeParams);
               }
            }
         }
         if(_loc1_)
         {
            this._attributes.recalculate();
            this.checkAchievements();
            this.needsActionBarUpdate = true;
         }
      }
      
      public function rerollHero(param1:Number) : Array
      {
         this.addSouls(-2);
         var _loc2_:Hero = this.heroCollection.getById(param1);
         _loc2_.epicLevel--;
         var _loc3_:Array = this.getRandomGoldenHeroes(1,_loc2_.id);
         this.heroCollection.addEpicLevel(_loc3_[0]);
         return _loc3_;
      }
      
      public function updateActiveTime(param1:Boolean = true) : void
      {
         this.unixTimestamp = ServerTimeKeeper.instance.timestamp;
         if(param1)
         {
            this.activityCount++;
         }
      }
      
      public function gildSpecificHero(param1:Number) : Number
      {
         var _loc6_:Hero = null;
         var _loc7_:* = NaN;
         var _loc8_:Hero = null;
         var _loc2_:Object = {};
         var _loc3_:Hero = this.heroCollection.getById(param1);
         var _loc4_:* = false;
         var _loc5_:Number = 1;
         while(_loc5_ <= this.numHeroes())
         {
            _loc6_ = this.heroCollection.getById(_loc5_);
            _loc7_ = _loc6_.epicLevel;
            if(_loc7_ >= 1 && _loc6_.id != _loc3_.id)
            {
               _loc2_[_loc6_.id] = 1;
               _loc4_ = true;
            }
            _loc5_++;
         }
         if(_loc4_)
         {
            this.addSouls(-80);
            _loc8_ = this.heroCollection.getById(this.epicRoller.weightedChoice(_loc2_));
            _loc8_.epicLevel = _loc8_.epicLevel - 1;
            _loc3_.epicLevel = _loc3_.epicLevel + 1;
            return _loc8_.id;
         }
         return 0;
      }
      
      public function getStaticAchievements() : Object
      {
         if(this._staticAchievements == null)
         {
            this._staticAchievements = StaticData.instance.getAll(Achievement);
         }
         return this._staticAchievements;
      }
      
      private function getStaticHeroes() : Object
      {
         if(this._staticHeroes == null)
         {
            this._staticHeroes = StaticData.instance.getAll(Hero);
         }
         return this._staticHeroes;
      }
      
      public function seeZone100Tip() : *
      {
         this.hasSeenZone100Tip = true;
      }
      
      public function trackEvent(param1:String, param2:Object = null) : void
      {
         var _loc3_:GenericEvent = null;
         if(!this.isCheater)
         {
            if(param2 == null)
            {
               var param2:Object = {};
            }
            param2["highest_zone"] = this.highestFinishedZonePersist;
            param2["rubies"] = this.rubies;
            param2["heroSouls"] = this.heroSouls;
            param2["currentZone"] = this.currentZoneHeight;
            _loc3_ = new GenericEvent(TRACK_EVENT,{
               "name":param1,
               "params":param2
            });
            dispatchEvent(_loc3_);
         }
      }
      
      public function trackAdjustEvent(param1:String = "", param2:String = "", param3:Object = null) : void
      {
         if(param3 == null)
         {
            var param3:Object = {};
         }
         var _loc4_:GenericEvent = new GenericEvent(TRACK_ADJUST_EVENT,{
            "androidToken":param1,
            "iosToken":param2,
            "params":param3
         });
         dispatchEvent(_loc4_);
      }
      
      public function useSkill(param1:Number) : void
      {
         if(!this.persistentVars.didUseSkill)
         {
            this.persistentVars.didUseSkill = true;
            this.trackEvent("step_070_used_skill");
         }
      }
      
      public function getTitanReward(param1:Number, param2:Boolean = true, param3:Number = NaN) : Object
      {
         var _loc4_:Number = param1;
         if(param1 > 12)
         {
            _loc4_ = Math.ceil(new Monster().getTitanMaxHealth(param1) / (100000 + param1 * 10000));
         }
         var _loc5_:Number = 10 * _loc4_;
         if(!isNaN(param3))
         {
            _loc4_ = Math.ceil(_loc5_ * 0.05 + _loc5_ * 0.5 * param3);
         }
         if(_loc4_ > Math.ceil(this.totalHeroSoulsFromAscensions * 0.1) && _loc4_ > 4)
         {
            _loc4_ = Math.ceil(this.totalHeroSoulsFromAscensions * 0.1);
            if(_loc4_ < 4)
            {
               _loc4_ = 4;
            }
         }
         if(param2)
         {
            this.addSouls(_loc4_);
         }
         return {"heroSouls":_loc4_};
      }
      
      public function getNextRaidTimestamp() : Number
      {
         if(this.getNumRaidsLeftToday() <= 0)
         {
            return ServerTimeKeeper.instance.tomorrowStartTimestamp;
         }
         if(this.lastRaidTimestamp + RAID_COOLDOWN > ServerTimeKeeper.instance.timestamp + RAID_COOLDOWN)
         {
            this.lastRaidTimestamp = ServerTimeKeeper.instance.timestamp;
         }
         return this.lastRaidTimestamp + RAID_COOLDOWN;
      }
      
      public function finishRaid() : void
      {
         this.lastRaidTimestamp = ServerTimeKeeper.instance.timestamp;
         this.numRaidsToday = this.numRaidsToday + 1;
      }
      
      public function getNumRaidsLeftToday() : Number
      {
         if(!ServerTimeKeeper.instance.isToday(this.lastRaidTimestamp))
         {
            this.numRaidsToday = 0;
         }
         return NUM_RAIDS_PER_DAY - this.numRaidsToday;
      }
      
      private function cleanCollectedRaidRewardDates() : *
      {
         var _loc4_:String = null;
         var _loc1_:String = ServerTimeKeeper.instance.todayYmd;
         var _loc2_:String = ServerTimeKeeper.instance.yesterdayYmd;
         var _loc3_:Array = [];
         for(_loc4_ in this.collectedRaidRewardDates)
         {
            if(_loc4_ != _loc1_ && _loc4_ != _loc2_)
            {
               _loc3_.push(_loc4_);
            }
         }
         for each(_loc4_ in _loc3_)
         {
            delete this.collectedRaidRewardDates[_loc4_];
         }
      }
      
      public function collectTodaysRaidRewards(param1:Number, param2:Number = 0) : Object
      {
         this.cleanCollectedRaidRewardDates();
         this.collectedRaidRewardDates[ServerTimeKeeper.instance.todayYmd] = true;
         return this.getTitanReward(param1,true,param2);
      }
      
      public function collectYesterdaysRaidRewards(param1:Number, param2:Number = 0) : Object
      {
         this.cleanCollectedRaidRewardDates();
         this.collectedRaidRewardDates[ServerTimeKeeper.instance.yesterdayYmd] = true;
         return this.getTitanReward(param1,true,param2);
      }
      
      public function get gotTodaysRaidRewards() : Boolean
      {
         return this.collectedRaidRewardDates.hasOwnProperty(ServerTimeKeeper.instance.todayYmd);
      }
      
      public function get gotYesterdaysRaidRewards() : Boolean
      {
         return this.collectedRaidRewardDates.hasOwnProperty(ServerTimeKeeper.instance.yesterdayYmd);
      }
      
      public function get todaysRaidEndTimestamp() : Number
      {
         return ServerTimeKeeper.instance.tomorrowStartTimestamp - 1000 * 60 * 5;
      }
      
      public function getAnotherRaidRubyCost() : Number
      {
         if(this.isWeb)
         {
            return 10;
         }
         return 100;
      }
      
      public function getAnotherRaid() : void
      {
         this.numRaidsToday = this.numRaidsToday - 1;
         this.lastRaidTimestamp = ServerTimeKeeper.instance.timestamp - RAID_COOLDOWN;
      }
      
      public function setDefeatedTitan(param1:int, param2:int) : void
      {
         if(param2 > this.getDefeatedTitan(param1))
         {
            this.titanTypesDefeated[param1] = param2;
         }
      }
      
      public function getDefeatedTitan(param1:int) : int
      {
         if(this.titanTypesDefeated[param1])
         {
            return this.titanTypesDefeated[param1];
         }
         return 0;
      }
      
      public function consumeLocal(param1:String) : void
      {
         var _loc2_:String = MD5.hash(param1);
         if(this.purchaseHashes.hasOwnProperty(_loc2_))
         {
            throw new Error("Already consumed receipt.");
         }
         this.purchaseHashes[_loc2_] = true;
      }
      
      public function canConsumeLocal(param1:String) : Boolean
      {
         var _loc2_:String = MD5.hash(param1);
         return !this.purchaseHashes.hasOwnProperty(_loc2_);
      }
      
      public function startAdBonus() : void
      {
         this.lastAdBonusTimestamp = ServerTimeKeeper.instance.timestamp;
      }
      
      public function isAdBonusActive() : Boolean
      {
         return ServerTimeKeeper.instance.timestamp < this.adBonusEndTime;
      }
      
      public function get adBonusEndTime() : Number
      {
         return this.lastAdBonusTimestamp + UserData.AD_BONUS_DURATION;
      }
      
      public function setPurchasedTitanFightExpTime() : void
      {
         this.purchasedTitanFightExpTime = ServerTimeKeeper.instance.timestamp + RAID_COOLDOWN;
      }
      
      public function clearPurchasedTitanFightExpTime() : void
      {
         this.purchasedTitanFightExpTime = 0;
      }
      
      public function minimizeAncient(param1:int) : *
      {
         this.ancientEntrySizes[param1] = 1;
         this.needsAncientEntriesRepositioned = true;
      }
      
      public function maximizeAncient(param1:int) : *
      {
         this.ancientEntrySizes[param1] = null;
         delete this.ancientEntrySizes[param1];
         this.needsAncientEntriesRepositioned = true;
      }
      
      public function minimizeHero(param1:int) : *
      {
         this.heroEntrySizes[param1] = 1;
      }
      
      public function maximizeHero(param1:int) : *
      {
         this.heroEntrySizes[param1] = null;
         delete this.heroEntrySizes[param1];
      }
   }
}
